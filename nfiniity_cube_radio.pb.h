// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nfiniity_cube_radio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nfiniity_5fcube_5fradio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nfiniity_5fcube_5fradio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nfiniity_5fcube_5fradio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nfiniity_5fcube_5fradio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nfiniity_5fcube_5fradio_2eproto;
class ChannelBusyRatio;
class ChannelBusyRatioDefaultTypeInternal;
extern ChannelBusyRatioDefaultTypeInternal _ChannelBusyRatio_default_instance_;
class CommandRequest;
class CommandRequestDefaultTypeInternal;
extern CommandRequestDefaultTypeInternal _CommandRequest_default_instance_;
class CommandResponse;
class CommandResponseDefaultTypeInternal;
extern CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
class CommandResponseData;
class CommandResponseDataDefaultTypeInternal;
extern CommandResponseDataDefaultTypeInternal _CommandResponseData_default_instance_;
class GossipMessage;
class GossipMessageDefaultTypeInternal;
extern GossipMessageDefaultTypeInternal _GossipMessage_default_instance_;
class LinkLayerReception;
class LinkLayerReceptionDefaultTypeInternal;
extern LinkLayerReceptionDefaultTypeInternal _LinkLayerReception_default_instance_;
class LinkLayerTransmission;
class LinkLayerTransmissionDefaultTypeInternal;
extern LinkLayerTransmissionDefaultTypeInternal _LinkLayerTransmission_default_instance_;
class RadioConfiguration;
class RadioConfigurationDefaultTypeInternal;
extern RadioConfigurationDefaultTypeInternal _RadioConfiguration_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChannelBusyRatio* Arena::CreateMaybeMessage<::ChannelBusyRatio>(Arena*);
template<> ::CommandRequest* Arena::CreateMaybeMessage<::CommandRequest>(Arena*);
template<> ::CommandResponse* Arena::CreateMaybeMessage<::CommandResponse>(Arena*);
template<> ::CommandResponseData* Arena::CreateMaybeMessage<::CommandResponseData>(Arena*);
template<> ::GossipMessage* Arena::CreateMaybeMessage<::GossipMessage>(Arena*);
template<> ::LinkLayerReception* Arena::CreateMaybeMessage<::LinkLayerReception>(Arena*);
template<> ::LinkLayerTransmission* Arena::CreateMaybeMessage<::LinkLayerTransmission>(Arena*);
template<> ::RadioConfiguration* Arena::CreateMaybeMessage<::RadioConfiguration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CommandResponse_Status : int {
  CommandResponse_Status_SUCCESS = 0,
  CommandResponse_Status_FAILURE = 1,
  CommandResponse_Status_UNKNOWN = 2,
  CommandResponse_Status_NOT_IMPLEMENTED = 3
};
bool CommandResponse_Status_IsValid(int value);
constexpr CommandResponse_Status CommandResponse_Status_Status_MIN = CommandResponse_Status_SUCCESS;
constexpr CommandResponse_Status CommandResponse_Status_Status_MAX = CommandResponse_Status_NOT_IMPLEMENTED;
constexpr int CommandResponse_Status_Status_ARRAYSIZE = CommandResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandResponse_Status_descriptor();
template<typename T>
inline const std::string& CommandResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandResponse_Status_descriptor(), enum_t_value);
}
inline bool CommandResponse_Status_Parse(
    const std::string& name, CommandResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandResponse_Status>(
    CommandResponse_Status_descriptor(), name, value);
}
enum LifecycleAction : int {
  SOFT_RESET = 0,
  HARD_RESET = 1
};
bool LifecycleAction_IsValid(int value);
constexpr LifecycleAction LifecycleAction_MIN = SOFT_RESET;
constexpr LifecycleAction LifecycleAction_MAX = HARD_RESET;
constexpr int LifecycleAction_ARRAYSIZE = LifecycleAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LifecycleAction_descriptor();
template<typename T>
inline const std::string& LifecycleAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LifecycleAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LifecycleAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LifecycleAction_descriptor(), enum_t_value);
}
inline bool LifecycleAction_Parse(
    const std::string& name, LifecycleAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LifecycleAction>(
    LifecycleAction_descriptor(), name, value);
}
enum LinkLayerPriority : int {
  BACKGROUND = 0,
  BEST_EFFORT = 1,
  VIDEO = 2,
  VOICE = 3
};
bool LinkLayerPriority_IsValid(int value);
constexpr LinkLayerPriority LinkLayerPriority_MIN = BACKGROUND;
constexpr LinkLayerPriority LinkLayerPriority_MAX = VOICE;
constexpr int LinkLayerPriority_ARRAYSIZE = LinkLayerPriority_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LinkLayerPriority_descriptor();
template<typename T>
inline const std::string& LinkLayerPriority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LinkLayerPriority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LinkLayerPriority_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LinkLayerPriority_descriptor(), enum_t_value);
}
inline bool LinkLayerPriority_Parse(
    const std::string& name, LinkLayerPriority* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LinkLayerPriority>(
    LinkLayerPriority_descriptor(), name, value);
}
// ===================================================================

class CommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommandRequest) */ {
 public:
  inline CommandRequest() : CommandRequest(nullptr) {};
  virtual ~CommandRequest();

  CommandRequest(const CommandRequest& from);
  CommandRequest(CommandRequest&& from) noexcept
    : CommandRequest() {
    *this = ::std::move(from);
  }

  inline CommandRequest& operator=(const CommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRequest& operator=(CommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandRequest& default_instance();

  enum KindCase {
    kLifecycle = 1,
    kLinklayerTx = 2,
    kRadioCfg = 3,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandRequest* internal_default_instance() {
    return reinterpret_cast<const CommandRequest*>(
               &_CommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandRequest& a, CommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandRequest* New() const final {
    return CreateMaybeMessage<CommandRequest>(nullptr);
  }

  CommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandRequest& from);
  void MergeFrom(const CommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommandRequest";
  }
  protected:
  explicit CommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfiniity_5fcube_5fradio_2eproto);
    return ::descriptor_table_nfiniity_5fcube_5fradio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLifecycleFieldNumber = 1,
    kLinklayerTxFieldNumber = 2,
    kRadioCfgFieldNumber = 3,
  };
  // .LifecycleAction lifecycle = 1;
  bool has_lifecycle() const;
  private:
  bool _internal_has_lifecycle() const;
  public:
  void clear_lifecycle();
  ::LifecycleAction lifecycle() const;
  void set_lifecycle(::LifecycleAction value);
  private:
  ::LifecycleAction _internal_lifecycle() const;
  void _internal_set_lifecycle(::LifecycleAction value);
  public:

  // .LinkLayerTransmission linklayer_tx = 2;
  bool has_linklayer_tx() const;
  private:
  bool _internal_has_linklayer_tx() const;
  public:
  void clear_linklayer_tx();
  const ::LinkLayerTransmission& linklayer_tx() const;
  ::LinkLayerTransmission* release_linklayer_tx();
  ::LinkLayerTransmission* mutable_linklayer_tx();
  void set_allocated_linklayer_tx(::LinkLayerTransmission* linklayer_tx);
  private:
  const ::LinkLayerTransmission& _internal_linklayer_tx() const;
  ::LinkLayerTransmission* _internal_mutable_linklayer_tx();
  public:
  void unsafe_arena_set_allocated_linklayer_tx(
      ::LinkLayerTransmission* linklayer_tx);
  ::LinkLayerTransmission* unsafe_arena_release_linklayer_tx();

  // .RadioConfiguration radio_cfg = 3;
  bool has_radio_cfg() const;
  private:
  bool _internal_has_radio_cfg() const;
  public:
  void clear_radio_cfg();
  const ::RadioConfiguration& radio_cfg() const;
  ::RadioConfiguration* release_radio_cfg();
  ::RadioConfiguration* mutable_radio_cfg();
  void set_allocated_radio_cfg(::RadioConfiguration* radio_cfg);
  private:
  const ::RadioConfiguration& _internal_radio_cfg() const;
  ::RadioConfiguration* _internal_mutable_radio_cfg();
  public:
  void unsafe_arena_set_allocated_radio_cfg(
      ::RadioConfiguration* radio_cfg);
  ::RadioConfiguration* unsafe_arena_release_radio_cfg();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:CommandRequest)
 private:
  class _Internal;
  void set_has_lifecycle();
  void set_has_linklayer_tx();
  void set_has_radio_cfg();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    KindUnion() {}
    int lifecycle_;
    ::LinkLayerTransmission* linklayer_tx_;
    ::RadioConfiguration* radio_cfg_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nfiniity_5fcube_5fradio_2eproto;
};
// -------------------------------------------------------------------

class CommandResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommandResponse) */ {
 public:
  inline CommandResponse() : CommandResponse(nullptr) {};
  virtual ~CommandResponse();

  CommandResponse(const CommandResponse& from);
  CommandResponse(CommandResponse&& from) noexcept
    : CommandResponse() {
    *this = ::std::move(from);
  }

  inline CommandResponse& operator=(const CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResponse& operator=(CommandResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandResponse* internal_default_instance() {
    return reinterpret_cast<const CommandResponse*>(
               &_CommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandResponse& a, CommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandResponse* New() const final {
    return CreateMaybeMessage<CommandResponse>(nullptr);
  }

  CommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandResponse& from);
  void MergeFrom(const CommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommandResponse";
  }
  protected:
  explicit CommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfiniity_5fcube_5fradio_2eproto);
    return ::descriptor_table_nfiniity_5fcube_5fradio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CommandResponse_Status Status;
  static constexpr Status SUCCESS =
    CommandResponse_Status_SUCCESS;
  static constexpr Status FAILURE =
    CommandResponse_Status_FAILURE;
  static constexpr Status UNKNOWN =
    CommandResponse_Status_UNKNOWN;
  static constexpr Status NOT_IMPLEMENTED =
    CommandResponse_Status_NOT_IMPLEMENTED;
  static inline bool Status_IsValid(int value) {
    return CommandResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    CommandResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    CommandResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    CommandResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return CommandResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return CommandResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return CommandResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional .CommandResponseData data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CommandResponseData& data() const;
  ::CommandResponseData* release_data();
  ::CommandResponseData* mutable_data();
  void set_allocated_data(::CommandResponseData* data);
  private:
  const ::CommandResponseData& _internal_data() const;
  ::CommandResponseData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CommandResponseData* data);
  ::CommandResponseData* unsafe_arena_release_data();

  // required .CommandResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::CommandResponse_Status status() const;
  void set_status(::CommandResponse_Status value);
  private:
  ::CommandResponse_Status _internal_status() const;
  void _internal_set_status(::CommandResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:CommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::CommandResponseData* data_;
  int status_;
  friend struct ::TableStruct_nfiniity_5fcube_5fradio_2eproto;
};
// -------------------------------------------------------------------

class CommandResponseData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommandResponseData) */ {
 public:
  inline CommandResponseData() : CommandResponseData(nullptr) {};
  virtual ~CommandResponseData();

  CommandResponseData(const CommandResponseData& from);
  CommandResponseData(CommandResponseData&& from) noexcept
    : CommandResponseData() {
    *this = ::std::move(from);
  }

  inline CommandResponseData& operator=(const CommandResponseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResponseData& operator=(CommandResponseData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandResponseData& default_instance();

  enum KindCase {
    kRadioCfg = 1,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandResponseData* internal_default_instance() {
    return reinterpret_cast<const CommandResponseData*>(
               &_CommandResponseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandResponseData& a, CommandResponseData& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResponseData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResponseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandResponseData* New() const final {
    return CreateMaybeMessage<CommandResponseData>(nullptr);
  }

  CommandResponseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandResponseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandResponseData& from);
  void MergeFrom(const CommandResponseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResponseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommandResponseData";
  }
  protected:
  explicit CommandResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfiniity_5fcube_5fradio_2eproto);
    return ::descriptor_table_nfiniity_5fcube_5fradio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadioCfgFieldNumber = 1,
  };
  // .RadioConfiguration radio_cfg = 1;
  bool has_radio_cfg() const;
  private:
  bool _internal_has_radio_cfg() const;
  public:
  void clear_radio_cfg();
  const ::RadioConfiguration& radio_cfg() const;
  ::RadioConfiguration* release_radio_cfg();
  ::RadioConfiguration* mutable_radio_cfg();
  void set_allocated_radio_cfg(::RadioConfiguration* radio_cfg);
  private:
  const ::RadioConfiguration& _internal_radio_cfg() const;
  ::RadioConfiguration* _internal_mutable_radio_cfg();
  public:
  void unsafe_arena_set_allocated_radio_cfg(
      ::RadioConfiguration* radio_cfg);
  ::RadioConfiguration* unsafe_arena_release_radio_cfg();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:CommandResponseData)
 private:
  class _Internal;
  void set_has_radio_cfg();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    KindUnion() {}
    ::RadioConfiguration* radio_cfg_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nfiniity_5fcube_5fradio_2eproto;
};
// -------------------------------------------------------------------

class RadioConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RadioConfiguration) */ {
 public:
  inline RadioConfiguration() : RadioConfiguration(nullptr) {};
  virtual ~RadioConfiguration();

  RadioConfiguration(const RadioConfiguration& from);
  RadioConfiguration(RadioConfiguration&& from) noexcept
    : RadioConfiguration() {
    *this = ::std::move(from);
  }

  inline RadioConfiguration& operator=(const RadioConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadioConfiguration& operator=(RadioConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadioConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadioConfiguration* internal_default_instance() {
    return reinterpret_cast<const RadioConfiguration*>(
               &_RadioConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RadioConfiguration& a, RadioConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(RadioConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadioConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadioConfiguration* New() const final {
    return CreateMaybeMessage<RadioConfiguration>(nullptr);
  }

  RadioConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadioConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadioConfiguration& from);
  void MergeFrom(const RadioConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadioConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RadioConfiguration";
  }
  protected:
  explicit RadioConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfiniity_5fcube_5fradio_2eproto);
    return ::descriptor_table_nfiniity_5fcube_5fradio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kChannelFrequencyMhzFieldNumber = 2,
    kFilterUnicastDestinationFieldNumber = 3,
    kDefaultTxPowerCbmFieldNumber = 4,
    kDefaultTxDatarate500KbpsFieldNumber = 5,
  };
  // optional bytes address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // optional uint32 channel_frequency_mhz = 2;
  bool has_channel_frequency_mhz() const;
  private:
  bool _internal_has_channel_frequency_mhz() const;
  public:
  void clear_channel_frequency_mhz();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_frequency_mhz() const;
  void set_channel_frequency_mhz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_frequency_mhz() const;
  void _internal_set_channel_frequency_mhz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool filter_unicast_destination = 3;
  bool has_filter_unicast_destination() const;
  private:
  bool _internal_has_filter_unicast_destination() const;
  public:
  void clear_filter_unicast_destination();
  bool filter_unicast_destination() const;
  void set_filter_unicast_destination(bool value);
  private:
  bool _internal_filter_unicast_destination() const;
  void _internal_set_filter_unicast_destination(bool value);
  public:

  // optional sint32 default_tx_power_cbm = 4;
  bool has_default_tx_power_cbm() const;
  private:
  bool _internal_has_default_tx_power_cbm() const;
  public:
  void clear_default_tx_power_cbm();
  ::PROTOBUF_NAMESPACE_ID::int32 default_tx_power_cbm() const;
  void set_default_tx_power_cbm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_default_tx_power_cbm() const;
  void _internal_set_default_tx_power_cbm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 default_tx_datarate_500kbps = 5;
  bool has_default_tx_datarate_500kbps() const;
  private:
  bool _internal_has_default_tx_datarate_500kbps() const;
  public:
  void clear_default_tx_datarate_500kbps();
  ::PROTOBUF_NAMESPACE_ID::uint32 default_tx_datarate_500kbps() const;
  void set_default_tx_datarate_500kbps(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_default_tx_datarate_500kbps() const;
  void _internal_set_default_tx_datarate_500kbps(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RadioConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_frequency_mhz_;
  bool filter_unicast_destination_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_tx_power_cbm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_tx_datarate_500kbps_;
  friend struct ::TableStruct_nfiniity_5fcube_5fradio_2eproto;
};
// -------------------------------------------------------------------

class LinkLayerTransmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LinkLayerTransmission) */ {
 public:
  inline LinkLayerTransmission() : LinkLayerTransmission(nullptr) {};
  virtual ~LinkLayerTransmission();

  LinkLayerTransmission(const LinkLayerTransmission& from);
  LinkLayerTransmission(LinkLayerTransmission&& from) noexcept
    : LinkLayerTransmission() {
    *this = ::std::move(from);
  }

  inline LinkLayerTransmission& operator=(const LinkLayerTransmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkLayerTransmission& operator=(LinkLayerTransmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkLayerTransmission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkLayerTransmission* internal_default_instance() {
    return reinterpret_cast<const LinkLayerTransmission*>(
               &_LinkLayerTransmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LinkLayerTransmission& a, LinkLayerTransmission& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkLayerTransmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkLayerTransmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkLayerTransmission* New() const final {
    return CreateMaybeMessage<LinkLayerTransmission>(nullptr);
  }

  LinkLayerTransmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkLayerTransmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkLayerTransmission& from);
  void MergeFrom(const LinkLayerTransmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkLayerTransmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LinkLayerTransmission";
  }
  protected:
  explicit LinkLayerTransmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfiniity_5fcube_5fradio_2eproto);
    return ::descriptor_table_nfiniity_5fcube_5fradio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kDestinationFieldNumber = 2,
    kPayloadFieldNumber = 10,
    kPriorityFieldNumber = 3,
    kChannelFieldNumber = 4,
    kDatarate500KbpsFieldNumber = 5,
    kPowerCbmFieldNumber = 6,
  };
  // optional bytes source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const void* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // required bytes destination = 2;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const void* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_destination();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_destination(
      std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // required bytes payload = 10;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // required .LinkLayerPriority priority = 3;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  ::LinkLayerPriority priority() const;
  void set_priority(::LinkLayerPriority value);
  private:
  ::LinkLayerPriority _internal_priority() const;
  void _internal_set_priority(::LinkLayerPriority value);
  public:

  // optional uint32 channel = 4;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 datarate_500kbps = 5;
  bool has_datarate_500kbps() const;
  private:
  bool _internal_has_datarate_500kbps() const;
  public:
  void clear_datarate_500kbps();
  ::PROTOBUF_NAMESPACE_ID::uint32 datarate_500kbps() const;
  void set_datarate_500kbps(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datarate_500kbps() const;
  void _internal_set_datarate_500kbps(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 power_cbm = 6;
  bool has_power_cbm() const;
  private:
  bool _internal_has_power_cbm() const;
  public:
  void clear_power_cbm();
  ::PROTOBUF_NAMESPACE_ID::int32 power_cbm() const;
  void set_power_cbm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_power_cbm() const;
  void _internal_set_power_cbm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LinkLayerTransmission)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  int priority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datarate_500kbps_;
  ::PROTOBUF_NAMESPACE_ID::int32 power_cbm_;
  friend struct ::TableStruct_nfiniity_5fcube_5fradio_2eproto;
};
// -------------------------------------------------------------------

class LinkLayerReception PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LinkLayerReception) */ {
 public:
  inline LinkLayerReception() : LinkLayerReception(nullptr) {};
  virtual ~LinkLayerReception();

  LinkLayerReception(const LinkLayerReception& from);
  LinkLayerReception(LinkLayerReception&& from) noexcept
    : LinkLayerReception() {
    *this = ::std::move(from);
  }

  inline LinkLayerReception& operator=(const LinkLayerReception& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkLayerReception& operator=(LinkLayerReception&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkLayerReception& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkLayerReception* internal_default_instance() {
    return reinterpret_cast<const LinkLayerReception*>(
               &_LinkLayerReception_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LinkLayerReception& a, LinkLayerReception& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkLayerReception* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkLayerReception* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkLayerReception* New() const final {
    return CreateMaybeMessage<LinkLayerReception>(nullptr);
  }

  LinkLayerReception* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkLayerReception>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkLayerReception& from);
  void MergeFrom(const LinkLayerReception& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkLayerReception* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LinkLayerReception";
  }
  protected:
  explicit LinkLayerReception(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfiniity_5fcube_5fradio_2eproto);
    return ::descriptor_table_nfiniity_5fcube_5fradio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kDestinationFieldNumber = 2,
    kPayloadFieldNumber = 10,
    kChannelFieldNumber = 4,
    kPowerCbmFieldNumber = 6,
  };
  // required bytes source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const void* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // required bytes destination = 2;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const void* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_destination();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_destination(
      std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // required bytes payload = 10;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional uint32 channel = 4;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 power_cbm = 6;
  bool has_power_cbm() const;
  private:
  bool _internal_has_power_cbm() const;
  public:
  void clear_power_cbm();
  ::PROTOBUF_NAMESPACE_ID::int32 power_cbm() const;
  void set_power_cbm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_power_cbm() const;
  void _internal_set_power_cbm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LinkLayerReception)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 power_cbm_;
  friend struct ::TableStruct_nfiniity_5fcube_5fradio_2eproto;
};
// -------------------------------------------------------------------

class ChannelBusyRatio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChannelBusyRatio) */ {
 public:
  inline ChannelBusyRatio() : ChannelBusyRatio(nullptr) {};
  virtual ~ChannelBusyRatio();

  ChannelBusyRatio(const ChannelBusyRatio& from);
  ChannelBusyRatio(ChannelBusyRatio&& from) noexcept
    : ChannelBusyRatio() {
    *this = ::std::move(from);
  }

  inline ChannelBusyRatio& operator=(const ChannelBusyRatio& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelBusyRatio& operator=(ChannelBusyRatio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelBusyRatio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelBusyRatio* internal_default_instance() {
    return reinterpret_cast<const ChannelBusyRatio*>(
               &_ChannelBusyRatio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChannelBusyRatio& a, ChannelBusyRatio& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelBusyRatio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelBusyRatio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelBusyRatio* New() const final {
    return CreateMaybeMessage<ChannelBusyRatio>(nullptr);
  }

  ChannelBusyRatio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelBusyRatio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelBusyRatio& from);
  void MergeFrom(const ChannelBusyRatio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelBusyRatio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChannelBusyRatio";
  }
  protected:
  explicit ChannelBusyRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfiniity_5fcube_5fradio_2eproto);
    return ::descriptor_table_nfiniity_5fcube_5fradio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusyFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // required uint32 busy = 1;
  bool has_busy() const;
  private:
  bool _internal_has_busy() const;
  public:
  void clear_busy();
  ::PROTOBUF_NAMESPACE_ID::uint32 busy() const;
  void set_busy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_busy() const;
  void _internal_set_busy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 total = 2;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChannelBusyRatio)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 busy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_;
  friend struct ::TableStruct_nfiniity_5fcube_5fradio_2eproto;
};
// -------------------------------------------------------------------

class GossipMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GossipMessage) */ {
 public:
  inline GossipMessage() : GossipMessage(nullptr) {};
  virtual ~GossipMessage();

  GossipMessage(const GossipMessage& from);
  GossipMessage(GossipMessage&& from) noexcept
    : GossipMessage() {
    *this = ::std::move(from);
  }

  inline GossipMessage& operator=(const GossipMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GossipMessage& operator=(GossipMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GossipMessage& default_instance();

  enum KindCase {
    kCbr = 1,
    kLinklayerRx = 2,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipMessage* internal_default_instance() {
    return reinterpret_cast<const GossipMessage*>(
               &_GossipMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GossipMessage& a, GossipMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GossipMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GossipMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GossipMessage* New() const final {
    return CreateMaybeMessage<GossipMessage>(nullptr);
  }

  GossipMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GossipMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GossipMessage& from);
  void MergeFrom(const GossipMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GossipMessage";
  }
  protected:
  explicit GossipMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nfiniity_5fcube_5fradio_2eproto);
    return ::descriptor_table_nfiniity_5fcube_5fradio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCbrFieldNumber = 1,
    kLinklayerRxFieldNumber = 2,
  };
  // .ChannelBusyRatio cbr = 1;
  bool has_cbr() const;
  private:
  bool _internal_has_cbr() const;
  public:
  void clear_cbr();
  const ::ChannelBusyRatio& cbr() const;
  ::ChannelBusyRatio* release_cbr();
  ::ChannelBusyRatio* mutable_cbr();
  void set_allocated_cbr(::ChannelBusyRatio* cbr);
  private:
  const ::ChannelBusyRatio& _internal_cbr() const;
  ::ChannelBusyRatio* _internal_mutable_cbr();
  public:
  void unsafe_arena_set_allocated_cbr(
      ::ChannelBusyRatio* cbr);
  ::ChannelBusyRatio* unsafe_arena_release_cbr();

  // .LinkLayerReception linklayer_rx = 2;
  bool has_linklayer_rx() const;
  private:
  bool _internal_has_linklayer_rx() const;
  public:
  void clear_linklayer_rx();
  const ::LinkLayerReception& linklayer_rx() const;
  ::LinkLayerReception* release_linklayer_rx();
  ::LinkLayerReception* mutable_linklayer_rx();
  void set_allocated_linklayer_rx(::LinkLayerReception* linklayer_rx);
  private:
  const ::LinkLayerReception& _internal_linklayer_rx() const;
  ::LinkLayerReception* _internal_mutable_linklayer_rx();
  public:
  void unsafe_arena_set_allocated_linklayer_rx(
      ::LinkLayerReception* linklayer_rx);
  ::LinkLayerReception* unsafe_arena_release_linklayer_rx();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:GossipMessage)
 private:
  class _Internal;
  void set_has_cbr();
  void set_has_linklayer_rx();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    KindUnion() {}
    ::ChannelBusyRatio* cbr_;
    ::LinkLayerReception* linklayer_rx_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_nfiniity_5fcube_5fradio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandRequest

// .LifecycleAction lifecycle = 1;
inline bool CommandRequest::_internal_has_lifecycle() const {
  return kind_case() == kLifecycle;
}
inline bool CommandRequest::has_lifecycle() const {
  return _internal_has_lifecycle();
}
inline void CommandRequest::set_has_lifecycle() {
  _oneof_case_[0] = kLifecycle;
}
inline void CommandRequest::clear_lifecycle() {
  if (_internal_has_lifecycle()) {
    kind_.lifecycle_ = 0;
    clear_has_kind();
  }
}
inline ::LifecycleAction CommandRequest::_internal_lifecycle() const {
  if (_internal_has_lifecycle()) {
    return static_cast< ::LifecycleAction >(kind_.lifecycle_);
  }
  return static_cast< ::LifecycleAction >(0);
}
inline ::LifecycleAction CommandRequest::lifecycle() const {
  // @@protoc_insertion_point(field_get:CommandRequest.lifecycle)
  return _internal_lifecycle();
}
inline void CommandRequest::_internal_set_lifecycle(::LifecycleAction value) {
  assert(::LifecycleAction_IsValid(value));
  if (!_internal_has_lifecycle()) {
    clear_kind();
    set_has_lifecycle();
  }
  kind_.lifecycle_ = value;
}
inline void CommandRequest::set_lifecycle(::LifecycleAction value) {
  // @@protoc_insertion_point(field_set:CommandRequest.lifecycle)
  _internal_set_lifecycle(value);
}

// .LinkLayerTransmission linklayer_tx = 2;
inline bool CommandRequest::_internal_has_linklayer_tx() const {
  return kind_case() == kLinklayerTx;
}
inline bool CommandRequest::has_linklayer_tx() const {
  return _internal_has_linklayer_tx();
}
inline void CommandRequest::set_has_linklayer_tx() {
  _oneof_case_[0] = kLinklayerTx;
}
inline void CommandRequest::clear_linklayer_tx() {
  if (_internal_has_linklayer_tx()) {
    if (GetArena() == nullptr) {
      delete kind_.linklayer_tx_;
    }
    clear_has_kind();
  }
}
inline ::LinkLayerTransmission* CommandRequest::release_linklayer_tx() {
  // @@protoc_insertion_point(field_release:CommandRequest.linklayer_tx)
  if (_internal_has_linklayer_tx()) {
    clear_has_kind();
      ::LinkLayerTransmission* temp = kind_.linklayer_tx_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.linklayer_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LinkLayerTransmission& CommandRequest::_internal_linklayer_tx() const {
  return _internal_has_linklayer_tx()
      ? *kind_.linklayer_tx_
      : *reinterpret_cast< ::LinkLayerTransmission*>(&::_LinkLayerTransmission_default_instance_);
}
inline const ::LinkLayerTransmission& CommandRequest::linklayer_tx() const {
  // @@protoc_insertion_point(field_get:CommandRequest.linklayer_tx)
  return _internal_linklayer_tx();
}
inline ::LinkLayerTransmission* CommandRequest::unsafe_arena_release_linklayer_tx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommandRequest.linklayer_tx)
  if (_internal_has_linklayer_tx()) {
    clear_has_kind();
    ::LinkLayerTransmission* temp = kind_.linklayer_tx_;
    kind_.linklayer_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandRequest::unsafe_arena_set_allocated_linklayer_tx(::LinkLayerTransmission* linklayer_tx) {
  clear_kind();
  if (linklayer_tx) {
    set_has_linklayer_tx();
    kind_.linklayer_tx_ = linklayer_tx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandRequest.linklayer_tx)
}
inline ::LinkLayerTransmission* CommandRequest::_internal_mutable_linklayer_tx() {
  if (!_internal_has_linklayer_tx()) {
    clear_kind();
    set_has_linklayer_tx();
    kind_.linklayer_tx_ = CreateMaybeMessage< ::LinkLayerTransmission >(GetArena());
  }
  return kind_.linklayer_tx_;
}
inline ::LinkLayerTransmission* CommandRequest::mutable_linklayer_tx() {
  // @@protoc_insertion_point(field_mutable:CommandRequest.linklayer_tx)
  return _internal_mutable_linklayer_tx();
}

// .RadioConfiguration radio_cfg = 3;
inline bool CommandRequest::_internal_has_radio_cfg() const {
  return kind_case() == kRadioCfg;
}
inline bool CommandRequest::has_radio_cfg() const {
  return _internal_has_radio_cfg();
}
inline void CommandRequest::set_has_radio_cfg() {
  _oneof_case_[0] = kRadioCfg;
}
inline void CommandRequest::clear_radio_cfg() {
  if (_internal_has_radio_cfg()) {
    if (GetArena() == nullptr) {
      delete kind_.radio_cfg_;
    }
    clear_has_kind();
  }
}
inline ::RadioConfiguration* CommandRequest::release_radio_cfg() {
  // @@protoc_insertion_point(field_release:CommandRequest.radio_cfg)
  if (_internal_has_radio_cfg()) {
    clear_has_kind();
      ::RadioConfiguration* temp = kind_.radio_cfg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.radio_cfg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RadioConfiguration& CommandRequest::_internal_radio_cfg() const {
  return _internal_has_radio_cfg()
      ? *kind_.radio_cfg_
      : *reinterpret_cast< ::RadioConfiguration*>(&::_RadioConfiguration_default_instance_);
}
inline const ::RadioConfiguration& CommandRequest::radio_cfg() const {
  // @@protoc_insertion_point(field_get:CommandRequest.radio_cfg)
  return _internal_radio_cfg();
}
inline ::RadioConfiguration* CommandRequest::unsafe_arena_release_radio_cfg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommandRequest.radio_cfg)
  if (_internal_has_radio_cfg()) {
    clear_has_kind();
    ::RadioConfiguration* temp = kind_.radio_cfg_;
    kind_.radio_cfg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandRequest::unsafe_arena_set_allocated_radio_cfg(::RadioConfiguration* radio_cfg) {
  clear_kind();
  if (radio_cfg) {
    set_has_radio_cfg();
    kind_.radio_cfg_ = radio_cfg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandRequest.radio_cfg)
}
inline ::RadioConfiguration* CommandRequest::_internal_mutable_radio_cfg() {
  if (!_internal_has_radio_cfg()) {
    clear_kind();
    set_has_radio_cfg();
    kind_.radio_cfg_ = CreateMaybeMessage< ::RadioConfiguration >(GetArena());
  }
  return kind_.radio_cfg_;
}
inline ::RadioConfiguration* CommandRequest::mutable_radio_cfg() {
  // @@protoc_insertion_point(field_mutable:CommandRequest.radio_cfg)
  return _internal_mutable_radio_cfg();
}

inline bool CommandRequest::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void CommandRequest::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline CommandRequest::KindCase CommandRequest::kind_case() const {
  return CommandRequest::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommandResponse

// required .CommandResponse.Status status = 1;
inline bool CommandResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandResponse::has_status() const {
  return _internal_has_status();
}
inline void CommandResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::CommandResponse_Status CommandResponse::_internal_status() const {
  return static_cast< ::CommandResponse_Status >(status_);
}
inline ::CommandResponse_Status CommandResponse::status() const {
  // @@protoc_insertion_point(field_get:CommandResponse.status)
  return _internal_status();
}
inline void CommandResponse::_internal_set_status(::CommandResponse_Status value) {
  assert(::CommandResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void CommandResponse::set_status(::CommandResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CommandResponse.status)
}

// optional string message = 2;
inline bool CommandResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandResponse::has_message() const {
  return _internal_has_message();
}
inline void CommandResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandResponse::message() const {
  // @@protoc_insertion_point(field_get:CommandResponse.message)
  return _internal_message();
}
inline void CommandResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:CommandResponse.message)
}
inline std::string* CommandResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:CommandResponse.message)
  return _internal_mutable_message();
}
inline const std::string& CommandResponse::_internal_message() const {
  return message_.Get();
}
inline void CommandResponse::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommandResponse::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommandResponse.message)
}
inline void CommandResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CommandResponse.message)
}
inline void CommandResponse::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommandResponse.message)
}
inline std::string* CommandResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommandResponse::release_message() {
  // @@protoc_insertion_point(field_release:CommandResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommandResponse.message)
}
inline std::string* CommandResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommandResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CommandResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandResponse.message)
}

// optional .CommandResponseData data = 3;
inline bool CommandResponse::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool CommandResponse::has_data() const {
  return _internal_has_data();
}
inline void CommandResponse::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CommandResponseData& CommandResponse::_internal_data() const {
  const ::CommandResponseData* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CommandResponseData*>(
      &::_CommandResponseData_default_instance_);
}
inline const ::CommandResponseData& CommandResponse::data() const {
  // @@protoc_insertion_point(field_get:CommandResponse.data)
  return _internal_data();
}
inline void CommandResponse::unsafe_arena_set_allocated_data(
    ::CommandResponseData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandResponse.data)
}
inline ::CommandResponseData* CommandResponse::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CommandResponseData* CommandResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CommandResponse.data)
  _has_bits_[0] &= ~0x00000002u;
  ::CommandResponseData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::CommandResponseData* CommandResponse::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommandResponseData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::CommandResponseData* CommandResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CommandResponse.data)
  return _internal_mutable_data();
}
inline void CommandResponse::set_allocated_data(::CommandResponseData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CommandResponse.data)
}

// -------------------------------------------------------------------

// CommandResponseData

// .RadioConfiguration radio_cfg = 1;
inline bool CommandResponseData::_internal_has_radio_cfg() const {
  return kind_case() == kRadioCfg;
}
inline bool CommandResponseData::has_radio_cfg() const {
  return _internal_has_radio_cfg();
}
inline void CommandResponseData::set_has_radio_cfg() {
  _oneof_case_[0] = kRadioCfg;
}
inline void CommandResponseData::clear_radio_cfg() {
  if (_internal_has_radio_cfg()) {
    if (GetArena() == nullptr) {
      delete kind_.radio_cfg_;
    }
    clear_has_kind();
  }
}
inline ::RadioConfiguration* CommandResponseData::release_radio_cfg() {
  // @@protoc_insertion_point(field_release:CommandResponseData.radio_cfg)
  if (_internal_has_radio_cfg()) {
    clear_has_kind();
      ::RadioConfiguration* temp = kind_.radio_cfg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.radio_cfg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RadioConfiguration& CommandResponseData::_internal_radio_cfg() const {
  return _internal_has_radio_cfg()
      ? *kind_.radio_cfg_
      : *reinterpret_cast< ::RadioConfiguration*>(&::_RadioConfiguration_default_instance_);
}
inline const ::RadioConfiguration& CommandResponseData::radio_cfg() const {
  // @@protoc_insertion_point(field_get:CommandResponseData.radio_cfg)
  return _internal_radio_cfg();
}
inline ::RadioConfiguration* CommandResponseData::unsafe_arena_release_radio_cfg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommandResponseData.radio_cfg)
  if (_internal_has_radio_cfg()) {
    clear_has_kind();
    ::RadioConfiguration* temp = kind_.radio_cfg_;
    kind_.radio_cfg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandResponseData::unsafe_arena_set_allocated_radio_cfg(::RadioConfiguration* radio_cfg) {
  clear_kind();
  if (radio_cfg) {
    set_has_radio_cfg();
    kind_.radio_cfg_ = radio_cfg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandResponseData.radio_cfg)
}
inline ::RadioConfiguration* CommandResponseData::_internal_mutable_radio_cfg() {
  if (!_internal_has_radio_cfg()) {
    clear_kind();
    set_has_radio_cfg();
    kind_.radio_cfg_ = CreateMaybeMessage< ::RadioConfiguration >(GetArena());
  }
  return kind_.radio_cfg_;
}
inline ::RadioConfiguration* CommandResponseData::mutable_radio_cfg() {
  // @@protoc_insertion_point(field_mutable:CommandResponseData.radio_cfg)
  return _internal_mutable_radio_cfg();
}

inline bool CommandResponseData::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void CommandResponseData::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline CommandResponseData::KindCase CommandResponseData::kind_case() const {
  return CommandResponseData::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RadioConfiguration

// optional bytes address = 1;
inline bool RadioConfiguration::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadioConfiguration::has_address() const {
  return _internal_has_address();
}
inline void RadioConfiguration::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RadioConfiguration::address() const {
  // @@protoc_insertion_point(field_get:RadioConfiguration.address)
  return _internal_address();
}
inline void RadioConfiguration::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:RadioConfiguration.address)
}
inline std::string* RadioConfiguration::mutable_address() {
  // @@protoc_insertion_point(field_mutable:RadioConfiguration.address)
  return _internal_mutable_address();
}
inline const std::string& RadioConfiguration::_internal_address() const {
  return address_.Get();
}
inline void RadioConfiguration::_internal_set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadioConfiguration::set_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RadioConfiguration.address)
}
inline void RadioConfiguration::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RadioConfiguration.address)
}
inline void RadioConfiguration::set_address(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RadioConfiguration.address)
}
inline std::string* RadioConfiguration::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000001u;
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadioConfiguration::release_address() {
  // @@protoc_insertion_point(field_release:RadioConfiguration.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadioConfiguration::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RadioConfiguration.address)
}
inline std::string* RadioConfiguration::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RadioConfiguration.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadioConfiguration::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RadioConfiguration.address)
}

// optional uint32 channel_frequency_mhz = 2;
inline bool RadioConfiguration::_internal_has_channel_frequency_mhz() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadioConfiguration::has_channel_frequency_mhz() const {
  return _internal_has_channel_frequency_mhz();
}
inline void RadioConfiguration::clear_channel_frequency_mhz() {
  channel_frequency_mhz_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadioConfiguration::_internal_channel_frequency_mhz() const {
  return channel_frequency_mhz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadioConfiguration::channel_frequency_mhz() const {
  // @@protoc_insertion_point(field_get:RadioConfiguration.channel_frequency_mhz)
  return _internal_channel_frequency_mhz();
}
inline void RadioConfiguration::_internal_set_channel_frequency_mhz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  channel_frequency_mhz_ = value;
}
inline void RadioConfiguration::set_channel_frequency_mhz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_frequency_mhz(value);
  // @@protoc_insertion_point(field_set:RadioConfiguration.channel_frequency_mhz)
}

// optional bool filter_unicast_destination = 3;
inline bool RadioConfiguration::_internal_has_filter_unicast_destination() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadioConfiguration::has_filter_unicast_destination() const {
  return _internal_has_filter_unicast_destination();
}
inline void RadioConfiguration::clear_filter_unicast_destination() {
  filter_unicast_destination_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RadioConfiguration::_internal_filter_unicast_destination() const {
  return filter_unicast_destination_;
}
inline bool RadioConfiguration::filter_unicast_destination() const {
  // @@protoc_insertion_point(field_get:RadioConfiguration.filter_unicast_destination)
  return _internal_filter_unicast_destination();
}
inline void RadioConfiguration::_internal_set_filter_unicast_destination(bool value) {
  _has_bits_[0] |= 0x00000004u;
  filter_unicast_destination_ = value;
}
inline void RadioConfiguration::set_filter_unicast_destination(bool value) {
  _internal_set_filter_unicast_destination(value);
  // @@protoc_insertion_point(field_set:RadioConfiguration.filter_unicast_destination)
}

// optional sint32 default_tx_power_cbm = 4;
inline bool RadioConfiguration::_internal_has_default_tx_power_cbm() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadioConfiguration::has_default_tx_power_cbm() const {
  return _internal_has_default_tx_power_cbm();
}
inline void RadioConfiguration::clear_default_tx_power_cbm() {
  default_tx_power_cbm_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadioConfiguration::_internal_default_tx_power_cbm() const {
  return default_tx_power_cbm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadioConfiguration::default_tx_power_cbm() const {
  // @@protoc_insertion_point(field_get:RadioConfiguration.default_tx_power_cbm)
  return _internal_default_tx_power_cbm();
}
inline void RadioConfiguration::_internal_set_default_tx_power_cbm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  default_tx_power_cbm_ = value;
}
inline void RadioConfiguration::set_default_tx_power_cbm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_default_tx_power_cbm(value);
  // @@protoc_insertion_point(field_set:RadioConfiguration.default_tx_power_cbm)
}

// optional uint32 default_tx_datarate_500kbps = 5;
inline bool RadioConfiguration::_internal_has_default_tx_datarate_500kbps() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadioConfiguration::has_default_tx_datarate_500kbps() const {
  return _internal_has_default_tx_datarate_500kbps();
}
inline void RadioConfiguration::clear_default_tx_datarate_500kbps() {
  default_tx_datarate_500kbps_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadioConfiguration::_internal_default_tx_datarate_500kbps() const {
  return default_tx_datarate_500kbps_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadioConfiguration::default_tx_datarate_500kbps() const {
  // @@protoc_insertion_point(field_get:RadioConfiguration.default_tx_datarate_500kbps)
  return _internal_default_tx_datarate_500kbps();
}
inline void RadioConfiguration::_internal_set_default_tx_datarate_500kbps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  default_tx_datarate_500kbps_ = value;
}
inline void RadioConfiguration::set_default_tx_datarate_500kbps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_default_tx_datarate_500kbps(value);
  // @@protoc_insertion_point(field_set:RadioConfiguration.default_tx_datarate_500kbps)
}

// -------------------------------------------------------------------

// LinkLayerTransmission

// optional bytes source = 1;
inline bool LinkLayerTransmission::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinkLayerTransmission::has_source() const {
  return _internal_has_source();
}
inline void LinkLayerTransmission::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LinkLayerTransmission::source() const {
  // @@protoc_insertion_point(field_get:LinkLayerTransmission.source)
  return _internal_source();
}
inline void LinkLayerTransmission::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:LinkLayerTransmission.source)
}
inline std::string* LinkLayerTransmission::mutable_source() {
  // @@protoc_insertion_point(field_mutable:LinkLayerTransmission.source)
  return _internal_mutable_source();
}
inline const std::string& LinkLayerTransmission::_internal_source() const {
  return source_.Get();
}
inline void LinkLayerTransmission::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkLayerTransmission::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkLayerTransmission.source)
}
inline void LinkLayerTransmission::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkLayerTransmission.source)
}
inline void LinkLayerTransmission::set_source(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkLayerTransmission.source)
}
inline std::string* LinkLayerTransmission::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkLayerTransmission::release_source() {
  // @@protoc_insertion_point(field_release:LinkLayerTransmission.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkLayerTransmission::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkLayerTransmission.source)
}
inline std::string* LinkLayerTransmission::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LinkLayerTransmission.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinkLayerTransmission::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LinkLayerTransmission.source)
}

// required bytes destination = 2;
inline bool LinkLayerTransmission::_internal_has_destination() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LinkLayerTransmission::has_destination() const {
  return _internal_has_destination();
}
inline void LinkLayerTransmission::clear_destination() {
  destination_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LinkLayerTransmission::destination() const {
  // @@protoc_insertion_point(field_get:LinkLayerTransmission.destination)
  return _internal_destination();
}
inline void LinkLayerTransmission::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:LinkLayerTransmission.destination)
}
inline std::string* LinkLayerTransmission::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:LinkLayerTransmission.destination)
  return _internal_mutable_destination();
}
inline const std::string& LinkLayerTransmission::_internal_destination() const {
  return destination_.Get();
}
inline void LinkLayerTransmission::_internal_set_destination(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkLayerTransmission::set_destination(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  destination_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkLayerTransmission.destination)
}
inline void LinkLayerTransmission::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkLayerTransmission.destination)
}
inline void LinkLayerTransmission::set_destination(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkLayerTransmission.destination)
}
inline std::string* LinkLayerTransmission::_internal_mutable_destination() {
  _has_bits_[0] |= 0x00000002u;
  return destination_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkLayerTransmission::release_destination() {
  // @@protoc_insertion_point(field_release:LinkLayerTransmission.destination)
  if (!_internal_has_destination()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return destination_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkLayerTransmission::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkLayerTransmission.destination)
}
inline std::string* LinkLayerTransmission::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LinkLayerTransmission.destination)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return destination_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinkLayerTransmission::unsafe_arena_set_allocated_destination(
    std::string* destination) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (destination != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  destination_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      destination, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LinkLayerTransmission.destination)
}

// required .LinkLayerPriority priority = 3;
inline bool LinkLayerTransmission::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LinkLayerTransmission::has_priority() const {
  return _internal_has_priority();
}
inline void LinkLayerTransmission::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::LinkLayerPriority LinkLayerTransmission::_internal_priority() const {
  return static_cast< ::LinkLayerPriority >(priority_);
}
inline ::LinkLayerPriority LinkLayerTransmission::priority() const {
  // @@protoc_insertion_point(field_get:LinkLayerTransmission.priority)
  return _internal_priority();
}
inline void LinkLayerTransmission::_internal_set_priority(::LinkLayerPriority value) {
  assert(::LinkLayerPriority_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  priority_ = value;
}
inline void LinkLayerTransmission::set_priority(::LinkLayerPriority value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:LinkLayerTransmission.priority)
}

// optional uint32 channel = 4;
inline bool LinkLayerTransmission::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LinkLayerTransmission::has_channel() const {
  return _internal_has_channel();
}
inline void LinkLayerTransmission::clear_channel() {
  channel_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkLayerTransmission::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkLayerTransmission::channel() const {
  // @@protoc_insertion_point(field_get:LinkLayerTransmission.channel)
  return _internal_channel();
}
inline void LinkLayerTransmission::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  channel_ = value;
}
inline void LinkLayerTransmission::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:LinkLayerTransmission.channel)
}

// optional uint32 datarate_500kbps = 5;
inline bool LinkLayerTransmission::_internal_has_datarate_500kbps() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LinkLayerTransmission::has_datarate_500kbps() const {
  return _internal_has_datarate_500kbps();
}
inline void LinkLayerTransmission::clear_datarate_500kbps() {
  datarate_500kbps_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkLayerTransmission::_internal_datarate_500kbps() const {
  return datarate_500kbps_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkLayerTransmission::datarate_500kbps() const {
  // @@protoc_insertion_point(field_get:LinkLayerTransmission.datarate_500kbps)
  return _internal_datarate_500kbps();
}
inline void LinkLayerTransmission::_internal_set_datarate_500kbps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  datarate_500kbps_ = value;
}
inline void LinkLayerTransmission::set_datarate_500kbps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datarate_500kbps(value);
  // @@protoc_insertion_point(field_set:LinkLayerTransmission.datarate_500kbps)
}

// optional sint32 power_cbm = 6;
inline bool LinkLayerTransmission::_internal_has_power_cbm() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LinkLayerTransmission::has_power_cbm() const {
  return _internal_has_power_cbm();
}
inline void LinkLayerTransmission::clear_power_cbm() {
  power_cbm_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinkLayerTransmission::_internal_power_cbm() const {
  return power_cbm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinkLayerTransmission::power_cbm() const {
  // @@protoc_insertion_point(field_get:LinkLayerTransmission.power_cbm)
  return _internal_power_cbm();
}
inline void LinkLayerTransmission::_internal_set_power_cbm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  power_cbm_ = value;
}
inline void LinkLayerTransmission::set_power_cbm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_power_cbm(value);
  // @@protoc_insertion_point(field_set:LinkLayerTransmission.power_cbm)
}

// required bytes payload = 10;
inline bool LinkLayerTransmission::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LinkLayerTransmission::has_payload() const {
  return _internal_has_payload();
}
inline void LinkLayerTransmission::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LinkLayerTransmission::payload() const {
  // @@protoc_insertion_point(field_get:LinkLayerTransmission.payload)
  return _internal_payload();
}
inline void LinkLayerTransmission::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:LinkLayerTransmission.payload)
}
inline std::string* LinkLayerTransmission::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:LinkLayerTransmission.payload)
  return _internal_mutable_payload();
}
inline const std::string& LinkLayerTransmission::_internal_payload() const {
  return payload_.Get();
}
inline void LinkLayerTransmission::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkLayerTransmission::set_payload(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkLayerTransmission.payload)
}
inline void LinkLayerTransmission::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkLayerTransmission.payload)
}
inline void LinkLayerTransmission::set_payload(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkLayerTransmission.payload)
}
inline std::string* LinkLayerTransmission::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000004u;
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkLayerTransmission::release_payload() {
  // @@protoc_insertion_point(field_release:LinkLayerTransmission.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return payload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkLayerTransmission::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkLayerTransmission.payload)
}
inline std::string* LinkLayerTransmission::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LinkLayerTransmission.payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinkLayerTransmission::unsafe_arena_set_allocated_payload(
    std::string* payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LinkLayerTransmission.payload)
}

// -------------------------------------------------------------------

// LinkLayerReception

// required bytes source = 1;
inline bool LinkLayerReception::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinkLayerReception::has_source() const {
  return _internal_has_source();
}
inline void LinkLayerReception::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LinkLayerReception::source() const {
  // @@protoc_insertion_point(field_get:LinkLayerReception.source)
  return _internal_source();
}
inline void LinkLayerReception::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:LinkLayerReception.source)
}
inline std::string* LinkLayerReception::mutable_source() {
  // @@protoc_insertion_point(field_mutable:LinkLayerReception.source)
  return _internal_mutable_source();
}
inline const std::string& LinkLayerReception::_internal_source() const {
  return source_.Get();
}
inline void LinkLayerReception::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkLayerReception::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkLayerReception.source)
}
inline void LinkLayerReception::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkLayerReception.source)
}
inline void LinkLayerReception::set_source(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkLayerReception.source)
}
inline std::string* LinkLayerReception::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkLayerReception::release_source() {
  // @@protoc_insertion_point(field_release:LinkLayerReception.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkLayerReception::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkLayerReception.source)
}
inline std::string* LinkLayerReception::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LinkLayerReception.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinkLayerReception::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LinkLayerReception.source)
}

// required bytes destination = 2;
inline bool LinkLayerReception::_internal_has_destination() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LinkLayerReception::has_destination() const {
  return _internal_has_destination();
}
inline void LinkLayerReception::clear_destination() {
  destination_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LinkLayerReception::destination() const {
  // @@protoc_insertion_point(field_get:LinkLayerReception.destination)
  return _internal_destination();
}
inline void LinkLayerReception::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:LinkLayerReception.destination)
}
inline std::string* LinkLayerReception::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:LinkLayerReception.destination)
  return _internal_mutable_destination();
}
inline const std::string& LinkLayerReception::_internal_destination() const {
  return destination_.Get();
}
inline void LinkLayerReception::_internal_set_destination(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkLayerReception::set_destination(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  destination_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkLayerReception.destination)
}
inline void LinkLayerReception::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkLayerReception.destination)
}
inline void LinkLayerReception::set_destination(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkLayerReception.destination)
}
inline std::string* LinkLayerReception::_internal_mutable_destination() {
  _has_bits_[0] |= 0x00000002u;
  return destination_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkLayerReception::release_destination() {
  // @@protoc_insertion_point(field_release:LinkLayerReception.destination)
  if (!_internal_has_destination()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return destination_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkLayerReception::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkLayerReception.destination)
}
inline std::string* LinkLayerReception::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LinkLayerReception.destination)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return destination_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinkLayerReception::unsafe_arena_set_allocated_destination(
    std::string* destination) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (destination != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  destination_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      destination, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LinkLayerReception.destination)
}

// optional uint32 channel = 4;
inline bool LinkLayerReception::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LinkLayerReception::has_channel() const {
  return _internal_has_channel();
}
inline void LinkLayerReception::clear_channel() {
  channel_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkLayerReception::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LinkLayerReception::channel() const {
  // @@protoc_insertion_point(field_get:LinkLayerReception.channel)
  return _internal_channel();
}
inline void LinkLayerReception::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  channel_ = value;
}
inline void LinkLayerReception::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:LinkLayerReception.channel)
}

// optional sint32 power_cbm = 6;
inline bool LinkLayerReception::_internal_has_power_cbm() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LinkLayerReception::has_power_cbm() const {
  return _internal_has_power_cbm();
}
inline void LinkLayerReception::clear_power_cbm() {
  power_cbm_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinkLayerReception::_internal_power_cbm() const {
  return power_cbm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinkLayerReception::power_cbm() const {
  // @@protoc_insertion_point(field_get:LinkLayerReception.power_cbm)
  return _internal_power_cbm();
}
inline void LinkLayerReception::_internal_set_power_cbm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  power_cbm_ = value;
}
inline void LinkLayerReception::set_power_cbm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_power_cbm(value);
  // @@protoc_insertion_point(field_set:LinkLayerReception.power_cbm)
}

// required bytes payload = 10;
inline bool LinkLayerReception::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LinkLayerReception::has_payload() const {
  return _internal_has_payload();
}
inline void LinkLayerReception::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LinkLayerReception::payload() const {
  // @@protoc_insertion_point(field_get:LinkLayerReception.payload)
  return _internal_payload();
}
inline void LinkLayerReception::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:LinkLayerReception.payload)
}
inline std::string* LinkLayerReception::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:LinkLayerReception.payload)
  return _internal_mutable_payload();
}
inline const std::string& LinkLayerReception::_internal_payload() const {
  return payload_.Get();
}
inline void LinkLayerReception::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkLayerReception::set_payload(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkLayerReception.payload)
}
inline void LinkLayerReception::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkLayerReception.payload)
}
inline void LinkLayerReception::set_payload(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkLayerReception.payload)
}
inline std::string* LinkLayerReception::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000004u;
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkLayerReception::release_payload() {
  // @@protoc_insertion_point(field_release:LinkLayerReception.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return payload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkLayerReception::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkLayerReception.payload)
}
inline std::string* LinkLayerReception::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LinkLayerReception.payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinkLayerReception::unsafe_arena_set_allocated_payload(
    std::string* payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LinkLayerReception.payload)
}

// -------------------------------------------------------------------

// ChannelBusyRatio

// required uint32 busy = 1;
inline bool ChannelBusyRatio::_internal_has_busy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChannelBusyRatio::has_busy() const {
  return _internal_has_busy();
}
inline void ChannelBusyRatio::clear_busy() {
  busy_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelBusyRatio::_internal_busy() const {
  return busy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelBusyRatio::busy() const {
  // @@protoc_insertion_point(field_get:ChannelBusyRatio.busy)
  return _internal_busy();
}
inline void ChannelBusyRatio::_internal_set_busy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  busy_ = value;
}
inline void ChannelBusyRatio::set_busy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_busy(value);
  // @@protoc_insertion_point(field_set:ChannelBusyRatio.busy)
}

// required uint32 total = 2;
inline bool ChannelBusyRatio::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelBusyRatio::has_total() const {
  return _internal_has_total();
}
inline void ChannelBusyRatio::clear_total() {
  total_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelBusyRatio::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelBusyRatio::total() const {
  // @@protoc_insertion_point(field_get:ChannelBusyRatio.total)
  return _internal_total();
}
inline void ChannelBusyRatio::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  total_ = value;
}
inline void ChannelBusyRatio::set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:ChannelBusyRatio.total)
}

// -------------------------------------------------------------------

// GossipMessage

// .ChannelBusyRatio cbr = 1;
inline bool GossipMessage::_internal_has_cbr() const {
  return kind_case() == kCbr;
}
inline bool GossipMessage::has_cbr() const {
  return _internal_has_cbr();
}
inline void GossipMessage::set_has_cbr() {
  _oneof_case_[0] = kCbr;
}
inline void GossipMessage::clear_cbr() {
  if (_internal_has_cbr()) {
    if (GetArena() == nullptr) {
      delete kind_.cbr_;
    }
    clear_has_kind();
  }
}
inline ::ChannelBusyRatio* GossipMessage::release_cbr() {
  // @@protoc_insertion_point(field_release:GossipMessage.cbr)
  if (_internal_has_cbr()) {
    clear_has_kind();
      ::ChannelBusyRatio* temp = kind_.cbr_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.cbr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChannelBusyRatio& GossipMessage::_internal_cbr() const {
  return _internal_has_cbr()
      ? *kind_.cbr_
      : *reinterpret_cast< ::ChannelBusyRatio*>(&::_ChannelBusyRatio_default_instance_);
}
inline const ::ChannelBusyRatio& GossipMessage::cbr() const {
  // @@protoc_insertion_point(field_get:GossipMessage.cbr)
  return _internal_cbr();
}
inline ::ChannelBusyRatio* GossipMessage::unsafe_arena_release_cbr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GossipMessage.cbr)
  if (_internal_has_cbr()) {
    clear_has_kind();
    ::ChannelBusyRatio* temp = kind_.cbr_;
    kind_.cbr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GossipMessage::unsafe_arena_set_allocated_cbr(::ChannelBusyRatio* cbr) {
  clear_kind();
  if (cbr) {
    set_has_cbr();
    kind_.cbr_ = cbr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GossipMessage.cbr)
}
inline ::ChannelBusyRatio* GossipMessage::_internal_mutable_cbr() {
  if (!_internal_has_cbr()) {
    clear_kind();
    set_has_cbr();
    kind_.cbr_ = CreateMaybeMessage< ::ChannelBusyRatio >(GetArena());
  }
  return kind_.cbr_;
}
inline ::ChannelBusyRatio* GossipMessage::mutable_cbr() {
  // @@protoc_insertion_point(field_mutable:GossipMessage.cbr)
  return _internal_mutable_cbr();
}

// .LinkLayerReception linklayer_rx = 2;
inline bool GossipMessage::_internal_has_linklayer_rx() const {
  return kind_case() == kLinklayerRx;
}
inline bool GossipMessage::has_linklayer_rx() const {
  return _internal_has_linklayer_rx();
}
inline void GossipMessage::set_has_linklayer_rx() {
  _oneof_case_[0] = kLinklayerRx;
}
inline void GossipMessage::clear_linklayer_rx() {
  if (_internal_has_linklayer_rx()) {
    if (GetArena() == nullptr) {
      delete kind_.linklayer_rx_;
    }
    clear_has_kind();
  }
}
inline ::LinkLayerReception* GossipMessage::release_linklayer_rx() {
  // @@protoc_insertion_point(field_release:GossipMessage.linklayer_rx)
  if (_internal_has_linklayer_rx()) {
    clear_has_kind();
      ::LinkLayerReception* temp = kind_.linklayer_rx_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.linklayer_rx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LinkLayerReception& GossipMessage::_internal_linklayer_rx() const {
  return _internal_has_linklayer_rx()
      ? *kind_.linklayer_rx_
      : *reinterpret_cast< ::LinkLayerReception*>(&::_LinkLayerReception_default_instance_);
}
inline const ::LinkLayerReception& GossipMessage::linklayer_rx() const {
  // @@protoc_insertion_point(field_get:GossipMessage.linklayer_rx)
  return _internal_linklayer_rx();
}
inline ::LinkLayerReception* GossipMessage::unsafe_arena_release_linklayer_rx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GossipMessage.linklayer_rx)
  if (_internal_has_linklayer_rx()) {
    clear_has_kind();
    ::LinkLayerReception* temp = kind_.linklayer_rx_;
    kind_.linklayer_rx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GossipMessage::unsafe_arena_set_allocated_linklayer_rx(::LinkLayerReception* linklayer_rx) {
  clear_kind();
  if (linklayer_rx) {
    set_has_linklayer_rx();
    kind_.linklayer_rx_ = linklayer_rx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GossipMessage.linklayer_rx)
}
inline ::LinkLayerReception* GossipMessage::_internal_mutable_linklayer_rx() {
  if (!_internal_has_linklayer_rx()) {
    clear_kind();
    set_has_linklayer_rx();
    kind_.linklayer_rx_ = CreateMaybeMessage< ::LinkLayerReception >(GetArena());
  }
  return kind_.linklayer_rx_;
}
inline ::LinkLayerReception* GossipMessage::mutable_linklayer_rx() {
  // @@protoc_insertion_point(field_mutable:GossipMessage.linklayer_rx)
  return _internal_mutable_linklayer_rx();
}

inline bool GossipMessage::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void GossipMessage::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline GossipMessage::KindCase GossipMessage::kind_case() const {
  return GossipMessage::KindCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CommandResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommandResponse_Status>() {
  return ::CommandResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::LifecycleAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LifecycleAction>() {
  return ::LifecycleAction_descriptor();
}
template <> struct is_proto_enum< ::LinkLayerPriority> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LinkLayerPriority>() {
  return ::LinkLayerPriority_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nfiniity_5fcube_5fradio_2eproto
