// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nfiniity_cube_radio.proto

#include "nfiniity_cube_radio.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nfiniity_5fcube_5fradio_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelBusyRatio_nfiniity_5fcube_5fradio_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nfiniity_5fcube_5fradio_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandResponseData_nfiniity_5fcube_5fradio_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nfiniity_5fcube_5fradio_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkLayerReception_nfiniity_5fcube_5fradio_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nfiniity_5fcube_5fradio_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkLayerTransmission_nfiniity_5fcube_5fradio_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nfiniity_5fcube_5fradio_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadioConfiguration_nfiniity_5fcube_5fradio_2eproto;
class CommandRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandRequest> _instance;
  int lifecycle_;
  const ::LinkLayerTransmission* linklayer_tx_;
  const ::RadioConfiguration* radio_cfg_;
} _CommandRequest_default_instance_;
class CommandResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandResponse> _instance;
} _CommandResponse_default_instance_;
class CommandResponseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandResponseData> _instance;
  const ::RadioConfiguration* radio_cfg_;
} _CommandResponseData_default_instance_;
class RadioConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadioConfiguration> _instance;
} _RadioConfiguration_default_instance_;
class LinkLayerTransmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkLayerTransmission> _instance;
} _LinkLayerTransmission_default_instance_;
class LinkLayerReceptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkLayerReception> _instance;
} _LinkLayerReception_default_instance_;
class ChannelBusyRatioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelBusyRatio> _instance;
} _ChannelBusyRatio_default_instance_;
class GossipMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GossipMessage> _instance;
  const ::ChannelBusyRatio* cbr_;
  const ::LinkLayerReception* linklayer_rx_;
} _GossipMessage_default_instance_;
static void InitDefaultsscc_info_ChannelBusyRatio_nfiniity_5fcube_5fradio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChannelBusyRatio_default_instance_;
    new (ptr) ::ChannelBusyRatio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChannelBusyRatio::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelBusyRatio_nfiniity_5fcube_5fradio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelBusyRatio_nfiniity_5fcube_5fradio_2eproto}, {}};

static void InitDefaultsscc_info_CommandRequest_nfiniity_5fcube_5fradio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CommandRequest_default_instance_;
    new (ptr) ::CommandRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CommandRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommandRequest_nfiniity_5fcube_5fradio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CommandRequest_nfiniity_5fcube_5fradio_2eproto}, {
      &scc_info_LinkLayerTransmission_nfiniity_5fcube_5fradio_2eproto.base,
      &scc_info_RadioConfiguration_nfiniity_5fcube_5fradio_2eproto.base,}};

static void InitDefaultsscc_info_CommandResponse_nfiniity_5fcube_5fradio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CommandResponse_default_instance_;
    new (ptr) ::CommandResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CommandResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandResponse_nfiniity_5fcube_5fradio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandResponse_nfiniity_5fcube_5fradio_2eproto}, {
      &scc_info_CommandResponseData_nfiniity_5fcube_5fradio_2eproto.base,}};

static void InitDefaultsscc_info_CommandResponseData_nfiniity_5fcube_5fradio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CommandResponseData_default_instance_;
    new (ptr) ::CommandResponseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CommandResponseData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandResponseData_nfiniity_5fcube_5fradio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandResponseData_nfiniity_5fcube_5fradio_2eproto}, {
      &scc_info_RadioConfiguration_nfiniity_5fcube_5fradio_2eproto.base,}};

static void InitDefaultsscc_info_GossipMessage_nfiniity_5fcube_5fradio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GossipMessage_default_instance_;
    new (ptr) ::GossipMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GossipMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GossipMessage_nfiniity_5fcube_5fradio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GossipMessage_nfiniity_5fcube_5fradio_2eproto}, {
      &scc_info_ChannelBusyRatio_nfiniity_5fcube_5fradio_2eproto.base,
      &scc_info_LinkLayerReception_nfiniity_5fcube_5fradio_2eproto.base,}};

static void InitDefaultsscc_info_LinkLayerReception_nfiniity_5fcube_5fradio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LinkLayerReception_default_instance_;
    new (ptr) ::LinkLayerReception();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LinkLayerReception::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkLayerReception_nfiniity_5fcube_5fradio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinkLayerReception_nfiniity_5fcube_5fradio_2eproto}, {}};

static void InitDefaultsscc_info_LinkLayerTransmission_nfiniity_5fcube_5fradio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LinkLayerTransmission_default_instance_;
    new (ptr) ::LinkLayerTransmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LinkLayerTransmission::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkLayerTransmission_nfiniity_5fcube_5fradio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinkLayerTransmission_nfiniity_5fcube_5fradio_2eproto}, {}};

static void InitDefaultsscc_info_RadioConfiguration_nfiniity_5fcube_5fradio_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RadioConfiguration_default_instance_;
    new (ptr) ::RadioConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RadioConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadioConfiguration_nfiniity_5fcube_5fradio_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RadioConfiguration_nfiniity_5fcube_5fradio_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nfiniity_5fcube_5fradio_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nfiniity_5fcube_5fradio_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nfiniity_5fcube_5fradio_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nfiniity_5fcube_5fradio_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CommandRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::CommandRequestDefaultTypeInternal, lifecycle_),
  offsetof(::CommandRequestDefaultTypeInternal, linklayer_tx_),
  offsetof(::CommandRequestDefaultTypeInternal, radio_cfg_),
  PROTOBUF_FIELD_OFFSET(::CommandRequest, kind_),
  PROTOBUF_FIELD_OFFSET(::CommandResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommandResponse, status_),
  PROTOBUF_FIELD_OFFSET(::CommandResponse, message_),
  PROTOBUF_FIELD_OFFSET(::CommandResponse, data_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommandResponseData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CommandResponseData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::CommandResponseDataDefaultTypeInternal, radio_cfg_),
  PROTOBUF_FIELD_OFFSET(::CommandResponseData, kind_),
  PROTOBUF_FIELD_OFFSET(::RadioConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RadioConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RadioConfiguration, address_),
  PROTOBUF_FIELD_OFFSET(::RadioConfiguration, channel_frequency_mhz_),
  PROTOBUF_FIELD_OFFSET(::RadioConfiguration, filter_unicast_destination_),
  PROTOBUF_FIELD_OFFSET(::RadioConfiguration, default_tx_power_cbm_),
  PROTOBUF_FIELD_OFFSET(::RadioConfiguration, default_tx_datarate_500kbps_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::LinkLayerTransmission, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LinkLayerTransmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LinkLayerTransmission, source_),
  PROTOBUF_FIELD_OFFSET(::LinkLayerTransmission, destination_),
  PROTOBUF_FIELD_OFFSET(::LinkLayerTransmission, priority_),
  PROTOBUF_FIELD_OFFSET(::LinkLayerTransmission, channel_),
  PROTOBUF_FIELD_OFFSET(::LinkLayerTransmission, datarate_500kbps_),
  PROTOBUF_FIELD_OFFSET(::LinkLayerTransmission, power_cbm_),
  PROTOBUF_FIELD_OFFSET(::LinkLayerTransmission, payload_),
  0,
  1,
  3,
  4,
  5,
  6,
  2,
  PROTOBUF_FIELD_OFFSET(::LinkLayerReception, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LinkLayerReception, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LinkLayerReception, source_),
  PROTOBUF_FIELD_OFFSET(::LinkLayerReception, destination_),
  PROTOBUF_FIELD_OFFSET(::LinkLayerReception, channel_),
  PROTOBUF_FIELD_OFFSET(::LinkLayerReception, power_cbm_),
  PROTOBUF_FIELD_OFFSET(::LinkLayerReception, payload_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::ChannelBusyRatio, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChannelBusyRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChannelBusyRatio, busy_),
  PROTOBUF_FIELD_OFFSET(::ChannelBusyRatio, total_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GossipMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GossipMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::GossipMessageDefaultTypeInternal, cbr_),
  offsetof(::GossipMessageDefaultTypeInternal, linklayer_rx_),
  PROTOBUF_FIELD_OFFSET(::GossipMessage, kind_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CommandRequest)},
  { 9, 17, sizeof(::CommandResponse)},
  { 20, -1, sizeof(::CommandResponseData)},
  { 27, 37, sizeof(::RadioConfiguration)},
  { 42, 54, sizeof(::LinkLayerTransmission)},
  { 61, 71, sizeof(::LinkLayerReception)},
  { 76, 83, sizeof(::ChannelBusyRatio)},
  { 85, -1, sizeof(::GossipMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CommandResponseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RadioConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LinkLayerTransmission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LinkLayerReception_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChannelBusyRatio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GossipMessage_default_instance_),
};

const char descriptor_table_protodef_nfiniity_5fcube_5fradio_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031nfiniity_cube_radio.proto\"\231\001\n\016CommandR"
  "equest\022%\n\tlifecycle\030\001 \001(\0162\020.LifecycleAct"
  "ionH\000\022.\n\014linklayer_tx\030\002 \001(\0132\026.LinkLayerT"
  "ransmissionH\000\022(\n\tradio_cfg\030\003 \001(\0132\023.Radio"
  "ConfigurationH\000B\006\n\004kind\"\265\001\n\017CommandRespo"
  "nse\022\'\n\006status\030\001 \002(\0162\027.CommandResponse.St"
  "atus\022\017\n\007message\030\002 \001(\t\022\"\n\004data\030\003 \001(\0132\024.Co"
  "mmandResponseData\"D\n\006Status\022\013\n\007SUCCESS\020\000"
  "\022\013\n\007FAILURE\020\001\022\013\n\007UNKNOWN\020\002\022\023\n\017NOT_IMPLEM"
  "ENTED\020\003\"G\n\023CommandResponseData\022(\n\tradio_"
  "cfg\030\001 \001(\0132\023.RadioConfigurationH\000B\006\n\004kind"
  "\"\253\001\n\022RadioConfiguration\022\017\n\007address\030\001 \001(\014"
  "\022\035\n\025channel_frequency_mhz\030\002 \001(\r\022\"\n\032filte"
  "r_unicast_destination\030\003 \001(\010\022\034\n\024default_t"
  "x_power_cbm\030\004 \001(\021\022#\n\033default_tx_datarate"
  "_500kbps\030\005 \001(\r\"\261\001\n\025LinkLayerTransmission"
  "\022\016\n\006source\030\001 \001(\014\022\023\n\013destination\030\002 \002(\014\022$\n"
  "\010priority\030\003 \002(\0162\022.LinkLayerPriority\022\017\n\007c"
  "hannel\030\004 \001(\r\022\030\n\020datarate_500kbps\030\005 \001(\r\022\021"
  "\n\tpower_cbm\030\006 \001(\021\022\017\n\007payload\030\n \002(\014\"n\n\022Li"
  "nkLayerReception\022\016\n\006source\030\001 \002(\014\022\023\n\013dest"
  "ination\030\002 \002(\014\022\017\n\007channel\030\004 \001(\r\022\021\n\tpower_"
  "cbm\030\006 \001(\021\022\017\n\007payload\030\n \002(\014\"/\n\020ChannelBus"
  "yRatio\022\014\n\004busy\030\001 \002(\r\022\r\n\005total\030\002 \002(\r\"f\n\rG"
  "ossipMessage\022 \n\003cbr\030\001 \001(\0132\021.ChannelBusyR"
  "atioH\000\022+\n\014linklayer_rx\030\002 \001(\0132\023.LinkLayer"
  "ReceptionH\000B\006\n\004kind*1\n\017LifecycleAction\022\016"
  "\n\nSOFT_RESET\020\000\022\016\n\nHARD_RESET\020\001*J\n\021LinkLa"
  "yerPriority\022\016\n\nBACKGROUND\020\000\022\017\n\013BEST_EFFO"
  "RT\020\001\022\t\n\005VIDEO\020\002\022\t\n\005VOICE\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nfiniity_5fcube_5fradio_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nfiniity_5fcube_5fradio_2eproto_sccs[8] = {
  &scc_info_ChannelBusyRatio_nfiniity_5fcube_5fradio_2eproto.base,
  &scc_info_CommandRequest_nfiniity_5fcube_5fradio_2eproto.base,
  &scc_info_CommandResponse_nfiniity_5fcube_5fradio_2eproto.base,
  &scc_info_CommandResponseData_nfiniity_5fcube_5fradio_2eproto.base,
  &scc_info_GossipMessage_nfiniity_5fcube_5fradio_2eproto.base,
  &scc_info_LinkLayerReception_nfiniity_5fcube_5fradio_2eproto.base,
  &scc_info_LinkLayerTransmission_nfiniity_5fcube_5fradio_2eproto.base,
  &scc_info_RadioConfiguration_nfiniity_5fcube_5fradio_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nfiniity_5fcube_5fradio_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nfiniity_5fcube_5fradio_2eproto = {
  false, false, descriptor_table_protodef_nfiniity_5fcube_5fradio_2eproto, "nfiniity_cube_radio.proto", 1186,
  &descriptor_table_nfiniity_5fcube_5fradio_2eproto_once, descriptor_table_nfiniity_5fcube_5fradio_2eproto_sccs, descriptor_table_nfiniity_5fcube_5fradio_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_nfiniity_5fcube_5fradio_2eproto::offsets,
  file_level_metadata_nfiniity_5fcube_5fradio_2eproto, 8, file_level_enum_descriptors_nfiniity_5fcube_5fradio_2eproto, file_level_service_descriptors_nfiniity_5fcube_5fradio_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nfiniity_5fcube_5fradio_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nfiniity_5fcube_5fradio_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nfiniity_5fcube_5fradio_2eproto);
  return file_level_enum_descriptors_nfiniity_5fcube_5fradio_2eproto[0];
}
bool CommandResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CommandResponse_Status CommandResponse::SUCCESS;
constexpr CommandResponse_Status CommandResponse::FAILURE;
constexpr CommandResponse_Status CommandResponse::UNKNOWN;
constexpr CommandResponse_Status CommandResponse::NOT_IMPLEMENTED;
constexpr CommandResponse_Status CommandResponse::Status_MIN;
constexpr CommandResponse_Status CommandResponse::Status_MAX;
constexpr int CommandResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LifecycleAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nfiniity_5fcube_5fradio_2eproto);
  return file_level_enum_descriptors_nfiniity_5fcube_5fradio_2eproto[1];
}
bool LifecycleAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LinkLayerPriority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nfiniity_5fcube_5fradio_2eproto);
  return file_level_enum_descriptors_nfiniity_5fcube_5fradio_2eproto[2];
}
bool LinkLayerPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CommandRequest::InitAsDefaultInstance() {
  ::_CommandRequest_default_instance_.lifecycle_ = 0;
  ::_CommandRequest_default_instance_.linklayer_tx_ = const_cast< ::LinkLayerTransmission*>(
      ::LinkLayerTransmission::internal_default_instance());
  ::_CommandRequest_default_instance_.radio_cfg_ = const_cast< ::RadioConfiguration*>(
      ::RadioConfiguration::internal_default_instance());
}
class CommandRequest::_Internal {
 public:
  static const ::LinkLayerTransmission& linklayer_tx(const CommandRequest* msg);
  static const ::RadioConfiguration& radio_cfg(const CommandRequest* msg);
};

const ::LinkLayerTransmission&
CommandRequest::_Internal::linklayer_tx(const CommandRequest* msg) {
  return *msg->kind_.linklayer_tx_;
}
const ::RadioConfiguration&
CommandRequest::_Internal::radio_cfg(const CommandRequest* msg) {
  return *msg->kind_.radio_cfg_;
}
void CommandRequest::set_allocated_linklayer_tx(::LinkLayerTransmission* linklayer_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (linklayer_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linklayer_tx);
    if (message_arena != submessage_arena) {
      linklayer_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linklayer_tx, submessage_arena);
    }
    set_has_linklayer_tx();
    kind_.linklayer_tx_ = linklayer_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:CommandRequest.linklayer_tx)
}
void CommandRequest::set_allocated_radio_cfg(::RadioConfiguration* radio_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (radio_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(radio_cfg);
    if (message_arena != submessage_arena) {
      radio_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radio_cfg, submessage_arena);
    }
    set_has_radio_cfg();
    kind_.radio_cfg_ = radio_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:CommandRequest.radio_cfg)
}
CommandRequest::CommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommandRequest)
}
CommandRequest::CommandRequest(const CommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kLifecycle: {
      _internal_set_lifecycle(from._internal_lifecycle());
      break;
    }
    case kLinklayerTx: {
      _internal_mutable_linklayer_tx()->::LinkLayerTransmission::MergeFrom(from._internal_linklayer_tx());
      break;
    }
    case kRadioCfg: {
      _internal_mutable_radio_cfg()->::RadioConfiguration::MergeFrom(from._internal_radio_cfg());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CommandRequest)
}

void CommandRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandRequest_nfiniity_5fcube_5fradio_2eproto.base);
  clear_has_kind();
}

CommandRequest::~CommandRequest() {
  // @@protoc_insertion_point(destructor:CommandRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void CommandRequest::ArenaDtor(void* object) {
  CommandRequest* _this = reinterpret_cast< CommandRequest* >(object);
  (void)_this;
}
void CommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandRequest& CommandRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandRequest_nfiniity_5fcube_5fradio_2eproto.base);
  return *internal_default_instance();
}


void CommandRequest::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:CommandRequest)
  switch (kind_case()) {
    case kLifecycle: {
      // No need to clear
      break;
    }
    case kLinklayerTx: {
      if (GetArena() == nullptr) {
        delete kind_.linklayer_tx_;
      }
      break;
    }
    case kRadioCfg: {
      if (GetArena() == nullptr) {
        delete kind_.radio_cfg_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void CommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LifecycleAction lifecycle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LifecycleAction_IsValid(val))) {
            _internal_set_lifecycle(static_cast<::LifecycleAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // .LinkLayerTransmission linklayer_tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linklayer_tx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RadioConfiguration radio_cfg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_radio_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (kind_case()) {
    case kLifecycle: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_lifecycle(), target);
      break;
    }
    case kLinklayerTx: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::linklayer_tx(this), target, stream);
      break;
    }
    case kRadioCfg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::radio_cfg(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommandRequest)
  return target;
}

size_t CommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .LifecycleAction lifecycle = 1;
    case kLifecycle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lifecycle());
      break;
    }
    // .LinkLayerTransmission linklayer_tx = 2;
    case kLinklayerTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.linklayer_tx_);
      break;
    }
    // .RadioConfiguration radio_cfg = 3;
    case kRadioCfg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.radio_cfg_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommandRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommandRequest)
    MergeFrom(*source);
  }
}

void CommandRequest::MergeFrom(const CommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kLifecycle: {
      _internal_set_lifecycle(from._internal_lifecycle());
      break;
    }
    case kLinklayerTx: {
      _internal_mutable_linklayer_tx()->::LinkLayerTransmission::MergeFrom(from._internal_linklayer_tx());
      break;
    }
    case kRadioCfg: {
      _internal_mutable_radio_cfg()->::RadioConfiguration::MergeFrom(from._internal_radio_cfg());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void CommandRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRequest::CopyFrom(const CommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRequest::IsInitialized() const {
  switch (kind_case()) {
    case kLifecycle: {
      break;
    }
    case kLinklayerTx: {
      if (has_linklayer_tx()) {
        if (!this->linklayer_tx().IsInitialized()) return false;
      }
      break;
    }
    case kRadioCfg: {
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return true;
}

void CommandRequest::InternalSwap(CommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandResponse::InitAsDefaultInstance() {
  ::_CommandResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::CommandResponseData*>(
      ::CommandResponseData::internal_default_instance());
}
class CommandResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandResponse>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CommandResponseData& data(const CommandResponse* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::CommandResponseData&
CommandResponse::_Internal::data(const CommandResponse* msg) {
  return *msg->data_;
}
CommandResponse::CommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommandResponse)
}
CommandResponse::CommandResponse(const CommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::CommandResponseData(*from.data_);
  } else {
    data_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:CommandResponse)
}

void CommandResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandResponse_nfiniity_5fcube_5fradio_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&data_)) + sizeof(status_));
}

CommandResponse::~CommandResponse() {
  // @@protoc_insertion_point(destructor:CommandResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void CommandResponse::ArenaDtor(void* object) {
  CommandResponse* _this = reinterpret_cast< CommandResponse* >(object);
  (void)_this;
}
void CommandResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandResponse& CommandResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandResponse_nfiniity_5fcube_5fradio_2eproto.base);
  return *internal_default_instance();
}


void CommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .CommandResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CommandResponse_Status_IsValid(val))) {
            _internal_set_status(static_cast<::CommandResponse_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CommandResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CommandResponseData data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CommandResponse.Status status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CommandResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional .CommandResponseData data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommandResponse)
  return target;
}

size_t CommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommandResponse)
  size_t total_size = 0;

  // required .CommandResponse.Status status = 1;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .CommandResponseData data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommandResponse)
    MergeFrom(*source);
  }
}

void CommandResponse::MergeFrom(const CommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_data()->::CommandResponseData::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandResponse::CopyFrom(const CommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CommandResponse::InternalSwap(CommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandResponse, status_)
      + sizeof(CommandResponse::status_)
      - PROTOBUF_FIELD_OFFSET(CommandResponse, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandResponseData::InitAsDefaultInstance() {
  ::_CommandResponseData_default_instance_.radio_cfg_ = const_cast< ::RadioConfiguration*>(
      ::RadioConfiguration::internal_default_instance());
}
class CommandResponseData::_Internal {
 public:
  static const ::RadioConfiguration& radio_cfg(const CommandResponseData* msg);
};

const ::RadioConfiguration&
CommandResponseData::_Internal::radio_cfg(const CommandResponseData* msg) {
  return *msg->kind_.radio_cfg_;
}
void CommandResponseData::set_allocated_radio_cfg(::RadioConfiguration* radio_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (radio_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(radio_cfg);
    if (message_arena != submessage_arena) {
      radio_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radio_cfg, submessage_arena);
    }
    set_has_radio_cfg();
    kind_.radio_cfg_ = radio_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:CommandResponseData.radio_cfg)
}
CommandResponseData::CommandResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommandResponseData)
}
CommandResponseData::CommandResponseData(const CommandResponseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kRadioCfg: {
      _internal_mutable_radio_cfg()->::RadioConfiguration::MergeFrom(from._internal_radio_cfg());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CommandResponseData)
}

void CommandResponseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandResponseData_nfiniity_5fcube_5fradio_2eproto.base);
  clear_has_kind();
}

CommandResponseData::~CommandResponseData() {
  // @@protoc_insertion_point(destructor:CommandResponseData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandResponseData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void CommandResponseData::ArenaDtor(void* object) {
  CommandResponseData* _this = reinterpret_cast< CommandResponseData* >(object);
  (void)_this;
}
void CommandResponseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandResponseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandResponseData& CommandResponseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandResponseData_nfiniity_5fcube_5fradio_2eproto.base);
  return *internal_default_instance();
}


void CommandResponseData::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:CommandResponseData)
  switch (kind_case()) {
    case kRadioCfg: {
      if (GetArena() == nullptr) {
        delete kind_.radio_cfg_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void CommandResponseData::Clear() {
// @@protoc_insertion_point(message_clear_start:CommandResponseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandResponseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RadioConfiguration radio_cfg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_radio_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandResponseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommandResponseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RadioConfiguration radio_cfg = 1;
  if (_internal_has_radio_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::radio_cfg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommandResponseData)
  return target;
}

size_t CommandResponseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommandResponseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .RadioConfiguration radio_cfg = 1;
    case kRadioCfg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.radio_cfg_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandResponseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommandResponseData)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandResponseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandResponseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommandResponseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommandResponseData)
    MergeFrom(*source);
  }
}

void CommandResponseData::MergeFrom(const CommandResponseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommandResponseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kRadioCfg: {
      _internal_mutable_radio_cfg()->::RadioConfiguration::MergeFrom(from._internal_radio_cfg());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void CommandResponseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommandResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandResponseData::CopyFrom(const CommandResponseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommandResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResponseData::IsInitialized() const {
  return true;
}

void CommandResponseData::InternalSwap(CommandResponseData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandResponseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadioConfiguration::InitAsDefaultInstance() {
}
class RadioConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<RadioConfiguration>()._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_frequency_mhz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filter_unicast_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_default_tx_power_cbm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_default_tx_datarate_500kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RadioConfiguration::RadioConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RadioConfiguration)
}
RadioConfiguration::RadioConfiguration(const RadioConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  ::memcpy(&channel_frequency_mhz_, &from.channel_frequency_mhz_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_tx_datarate_500kbps_) -
    reinterpret_cast<char*>(&channel_frequency_mhz_)) + sizeof(default_tx_datarate_500kbps_));
  // @@protoc_insertion_point(copy_constructor:RadioConfiguration)
}

void RadioConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadioConfiguration_nfiniity_5fcube_5fradio_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_frequency_mhz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_tx_datarate_500kbps_) -
      reinterpret_cast<char*>(&channel_frequency_mhz_)) + sizeof(default_tx_datarate_500kbps_));
}

RadioConfiguration::~RadioConfiguration() {
  // @@protoc_insertion_point(destructor:RadioConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadioConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RadioConfiguration::ArenaDtor(void* object) {
  RadioConfiguration* _this = reinterpret_cast< RadioConfiguration* >(object);
  (void)_this;
}
void RadioConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadioConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadioConfiguration& RadioConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadioConfiguration_nfiniity_5fcube_5fradio_2eproto.base);
  return *internal_default_instance();
}


void RadioConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:RadioConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&channel_frequency_mhz_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_tx_datarate_500kbps_) -
        reinterpret_cast<char*>(&channel_frequency_mhz_)) + sizeof(default_tx_datarate_500kbps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel_frequency_mhz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channel_frequency_mhz(&has_bits);
          channel_frequency_mhz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool filter_unicast_destination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_filter_unicast_destination(&has_bits);
          filter_unicast_destination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 default_tx_power_cbm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_default_tx_power_cbm(&has_bits);
          default_tx_power_cbm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 default_tx_datarate_500kbps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_default_tx_datarate_500kbps(&has_bits);
          default_tx_datarate_500kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadioConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RadioConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // optional uint32 channel_frequency_mhz = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_frequency_mhz(), target);
  }

  // optional bool filter_unicast_destination = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_filter_unicast_destination(), target);
  }

  // optional sint32 default_tx_power_cbm = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_default_tx_power_cbm(), target);
  }

  // optional uint32 default_tx_datarate_500kbps = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_default_tx_datarate_500kbps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RadioConfiguration)
  return target;
}

size_t RadioConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RadioConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_address());
    }

    // optional uint32 channel_frequency_mhz = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_frequency_mhz());
    }

    // optional bool filter_unicast_destination = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional sint32 default_tx_power_cbm = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_default_tx_power_cbm());
    }

    // optional uint32 default_tx_datarate_500kbps = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_default_tx_datarate_500kbps());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadioConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RadioConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const RadioConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadioConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RadioConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RadioConfiguration)
    MergeFrom(*source);
  }
}

void RadioConfiguration::MergeFrom(const RadioConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RadioConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_address(from._internal_address());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_frequency_mhz_ = from.channel_frequency_mhz_;
    }
    if (cached_has_bits & 0x00000004u) {
      filter_unicast_destination_ = from.filter_unicast_destination_;
    }
    if (cached_has_bits & 0x00000008u) {
      default_tx_power_cbm_ = from.default_tx_power_cbm_;
    }
    if (cached_has_bits & 0x00000010u) {
      default_tx_datarate_500kbps_ = from.default_tx_datarate_500kbps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadioConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RadioConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadioConfiguration::CopyFrom(const RadioConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RadioConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioConfiguration::IsInitialized() const {
  return true;
}

void RadioConfiguration::InternalSwap(RadioConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioConfiguration, default_tx_datarate_500kbps_)
      + sizeof(RadioConfiguration::default_tx_datarate_500kbps_)
      - PROTOBUF_FIELD_OFFSET(RadioConfiguration, channel_frequency_mhz_)>(
          reinterpret_cast<char*>(&channel_frequency_mhz_),
          reinterpret_cast<char*>(&other->channel_frequency_mhz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinkLayerTransmission::InitAsDefaultInstance() {
}
class LinkLayerTransmission::_Internal {
 public:
  using HasBits = decltype(std::declval<LinkLayerTransmission>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_datarate_500kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_power_cbm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

LinkLayerTransmission::LinkLayerTransmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LinkLayerTransmission)
}
LinkLayerTransmission::LinkLayerTransmission(const LinkLayerTransmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArena());
  }
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_destination()) {
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_destination(),
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_payload(),
      GetArena());
  }
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_cbm_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(power_cbm_));
  // @@protoc_insertion_point(copy_constructor:LinkLayerTransmission)
}

void LinkLayerTransmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinkLayerTransmission_nfiniity_5fcube_5fradio_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_cbm_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(power_cbm_));
}

LinkLayerTransmission::~LinkLayerTransmission() {
  // @@protoc_insertion_point(destructor:LinkLayerTransmission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkLayerTransmission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinkLayerTransmission::ArenaDtor(void* object) {
  LinkLayerTransmission* _this = reinterpret_cast< LinkLayerTransmission* >(object);
  (void)_this;
}
void LinkLayerTransmission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkLayerTransmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkLayerTransmission& LinkLayerTransmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkLayerTransmission_nfiniity_5fcube_5fradio_2eproto.base);
  return *internal_default_instance();
}


void LinkLayerTransmission::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkLayerTransmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      destination_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      payload_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&priority_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&power_cbm_) -
        reinterpret_cast<char*>(&priority_)) + sizeof(power_cbm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkLayerTransmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .LinkLayerPriority priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LinkLayerPriority_IsValid(val))) {
            _internal_set_priority(static_cast<::LinkLayerPriority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 datarate_500kbps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_datarate_500kbps(&has_bits);
          datarate_500kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 power_cbm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_power_cbm(&has_bits);
          power_cbm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes payload = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkLayerTransmission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkLayerTransmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes source = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_source(), target);
  }

  // required bytes destination = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_destination(), target);
  }

  // required .LinkLayerPriority priority = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_priority(), target);
  }

  // optional uint32 channel = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel(), target);
  }

  // optional uint32 datarate_500kbps = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_datarate_500kbps(), target);
  }

  // optional sint32 power_cbm = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_power_cbm(), target);
  }

  // required bytes payload = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkLayerTransmission)
  return target;
}

size_t LinkLayerTransmission::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LinkLayerTransmission)
  size_t total_size = 0;

  if (_internal_has_destination()) {
    // required bytes destination = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_destination());
  }

  if (_internal_has_payload()) {
    // required bytes payload = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  if (_internal_has_priority()) {
    // required .LinkLayerPriority priority = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_priority());
  }

  return total_size;
}
size_t LinkLayerTransmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkLayerTransmission)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required bytes destination = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_destination());

    // required bytes payload = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());

    // required .LinkLayerPriority priority = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_priority());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes source = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_source());
  }

  if (cached_has_bits & 0x00000070u) {
    // optional uint32 channel = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel());
    }

    // optional uint32 datarate_500kbps = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_datarate_500kbps());
    }

    // optional sint32 power_cbm = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_power_cbm());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkLayerTransmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkLayerTransmission)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkLayerTransmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkLayerTransmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkLayerTransmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkLayerTransmission)
    MergeFrom(*source);
  }
}

void LinkLayerTransmission::MergeFrom(const LinkLayerTransmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkLayerTransmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_destination(from._internal_destination());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000008u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000010u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000020u) {
      datarate_500kbps_ = from.datarate_500kbps_;
    }
    if (cached_has_bits & 0x00000040u) {
      power_cbm_ = from.power_cbm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinkLayerTransmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkLayerTransmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkLayerTransmission::CopyFrom(const LinkLayerTransmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkLayerTransmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkLayerTransmission::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LinkLayerTransmission::InternalSwap(LinkLayerTransmission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destination_.Swap(&other->destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinkLayerTransmission, power_cbm_)
      + sizeof(LinkLayerTransmission::power_cbm_)
      - PROTOBUF_FIELD_OFFSET(LinkLayerTransmission, priority_)>(
          reinterpret_cast<char*>(&priority_),
          reinterpret_cast<char*>(&other->priority_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkLayerTransmission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinkLayerReception::InitAsDefaultInstance() {
}
class LinkLayerReception::_Internal {
 public:
  using HasBits = decltype(std::declval<LinkLayerReception>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_power_cbm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

LinkLayerReception::LinkLayerReception(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LinkLayerReception)
}
LinkLayerReception::LinkLayerReception(const LinkLayerReception& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArena());
  }
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_destination()) {
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_destination(),
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_payload(),
      GetArena());
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_cbm_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(power_cbm_));
  // @@protoc_insertion_point(copy_constructor:LinkLayerReception)
}

void LinkLayerReception::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinkLayerReception_nfiniity_5fcube_5fradio_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_cbm_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(power_cbm_));
}

LinkLayerReception::~LinkLayerReception() {
  // @@protoc_insertion_point(destructor:LinkLayerReception)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkLayerReception::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinkLayerReception::ArenaDtor(void* object) {
  LinkLayerReception* _this = reinterpret_cast< LinkLayerReception* >(object);
  (void)_this;
}
void LinkLayerReception::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkLayerReception::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkLayerReception& LinkLayerReception::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkLayerReception_nfiniity_5fcube_5fradio_2eproto.base);
  return *internal_default_instance();
}


void LinkLayerReception::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkLayerReception)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      destination_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      payload_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&power_cbm_) -
        reinterpret_cast<char*>(&channel_)) + sizeof(power_cbm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkLayerReception::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 power_cbm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_power_cbm(&has_bits);
          power_cbm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes payload = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkLayerReception::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkLayerReception)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes source = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_source(), target);
  }

  // required bytes destination = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_destination(), target);
  }

  // optional uint32 channel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel(), target);
  }

  // optional sint32 power_cbm = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_power_cbm(), target);
  }

  // required bytes payload = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkLayerReception)
  return target;
}

size_t LinkLayerReception::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LinkLayerReception)
  size_t total_size = 0;

  if (_internal_has_source()) {
    // required bytes source = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_source());
  }

  if (_internal_has_destination()) {
    // required bytes destination = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_destination());
  }

  if (_internal_has_payload()) {
    // required bytes payload = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return total_size;
}
size_t LinkLayerReception::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkLayerReception)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes source = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_source());

    // required bytes destination = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_destination());

    // required bytes payload = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional uint32 channel = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel());
    }

    // optional sint32 power_cbm = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_power_cbm());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkLayerReception::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkLayerReception)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkLayerReception* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkLayerReception>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkLayerReception)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkLayerReception)
    MergeFrom(*source);
  }
}

void LinkLayerReception::MergeFrom(const LinkLayerReception& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkLayerReception)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_destination(from._internal_destination());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000008u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000010u) {
      power_cbm_ = from.power_cbm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinkLayerReception::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkLayerReception)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkLayerReception::CopyFrom(const LinkLayerReception& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkLayerReception)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkLayerReception::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LinkLayerReception::InternalSwap(LinkLayerReception* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destination_.Swap(&other->destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinkLayerReception, power_cbm_)
      + sizeof(LinkLayerReception::power_cbm_)
      - PROTOBUF_FIELD_OFFSET(LinkLayerReception, channel_)>(
          reinterpret_cast<char*>(&channel_),
          reinterpret_cast<char*>(&other->channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkLayerReception::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelBusyRatio::InitAsDefaultInstance() {
}
class ChannelBusyRatio::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelBusyRatio>()._has_bits_);
  static void set_has_busy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ChannelBusyRatio::ChannelBusyRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChannelBusyRatio)
}
ChannelBusyRatio::ChannelBusyRatio(const ChannelBusyRatio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&busy_, &from.busy_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&busy_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:ChannelBusyRatio)
}

void ChannelBusyRatio::SharedCtor() {
  ::memset(&busy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&busy_)) + sizeof(total_));
}

ChannelBusyRatio::~ChannelBusyRatio() {
  // @@protoc_insertion_point(destructor:ChannelBusyRatio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelBusyRatio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChannelBusyRatio::ArenaDtor(void* object) {
  ChannelBusyRatio* _this = reinterpret_cast< ChannelBusyRatio* >(object);
  (void)_this;
}
void ChannelBusyRatio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelBusyRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelBusyRatio& ChannelBusyRatio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelBusyRatio_nfiniity_5fcube_5fradio_2eproto.base);
  return *internal_default_instance();
}


void ChannelBusyRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:ChannelBusyRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&busy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_) -
        reinterpret_cast<char*>(&busy_)) + sizeof(total_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelBusyRatio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 busy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_busy(&has_bits);
          busy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelBusyRatio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChannelBusyRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 busy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_busy(), target);
  }

  // required uint32 total = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChannelBusyRatio)
  return target;
}

size_t ChannelBusyRatio::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChannelBusyRatio)
  size_t total_size = 0;

  if (_internal_has_busy()) {
    // required uint32 busy = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_busy());
  }

  if (_internal_has_total()) {
    // required uint32 total = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total());
  }

  return total_size;
}
size_t ChannelBusyRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChannelBusyRatio)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 busy = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_busy());

    // required uint32 total = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelBusyRatio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChannelBusyRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelBusyRatio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelBusyRatio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChannelBusyRatio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChannelBusyRatio)
    MergeFrom(*source);
  }
}

void ChannelBusyRatio::MergeFrom(const ChannelBusyRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChannelBusyRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      busy_ = from.busy_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_ = from.total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelBusyRatio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChannelBusyRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelBusyRatio::CopyFrom(const ChannelBusyRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChannelBusyRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelBusyRatio::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChannelBusyRatio::InternalSwap(ChannelBusyRatio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelBusyRatio, total_)
      + sizeof(ChannelBusyRatio::total_)
      - PROTOBUF_FIELD_OFFSET(ChannelBusyRatio, busy_)>(
          reinterpret_cast<char*>(&busy_),
          reinterpret_cast<char*>(&other->busy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelBusyRatio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GossipMessage::InitAsDefaultInstance() {
  ::_GossipMessage_default_instance_.cbr_ = const_cast< ::ChannelBusyRatio*>(
      ::ChannelBusyRatio::internal_default_instance());
  ::_GossipMessage_default_instance_.linklayer_rx_ = const_cast< ::LinkLayerReception*>(
      ::LinkLayerReception::internal_default_instance());
}
class GossipMessage::_Internal {
 public:
  static const ::ChannelBusyRatio& cbr(const GossipMessage* msg);
  static const ::LinkLayerReception& linklayer_rx(const GossipMessage* msg);
};

const ::ChannelBusyRatio&
GossipMessage::_Internal::cbr(const GossipMessage* msg) {
  return *msg->kind_.cbr_;
}
const ::LinkLayerReception&
GossipMessage::_Internal::linklayer_rx(const GossipMessage* msg) {
  return *msg->kind_.linklayer_rx_;
}
void GossipMessage::set_allocated_cbr(::ChannelBusyRatio* cbr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (cbr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cbr);
    if (message_arena != submessage_arena) {
      cbr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cbr, submessage_arena);
    }
    set_has_cbr();
    kind_.cbr_ = cbr;
  }
  // @@protoc_insertion_point(field_set_allocated:GossipMessage.cbr)
}
void GossipMessage::set_allocated_linklayer_rx(::LinkLayerReception* linklayer_rx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (linklayer_rx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linklayer_rx);
    if (message_arena != submessage_arena) {
      linklayer_rx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linklayer_rx, submessage_arena);
    }
    set_has_linklayer_rx();
    kind_.linklayer_rx_ = linklayer_rx;
  }
  // @@protoc_insertion_point(field_set_allocated:GossipMessage.linklayer_rx)
}
GossipMessage::GossipMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GossipMessage)
}
GossipMessage::GossipMessage(const GossipMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kCbr: {
      _internal_mutable_cbr()->::ChannelBusyRatio::MergeFrom(from._internal_cbr());
      break;
    }
    case kLinklayerRx: {
      _internal_mutable_linklayer_rx()->::LinkLayerReception::MergeFrom(from._internal_linklayer_rx());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GossipMessage)
}

void GossipMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GossipMessage_nfiniity_5fcube_5fradio_2eproto.base);
  clear_has_kind();
}

GossipMessage::~GossipMessage() {
  // @@protoc_insertion_point(destructor:GossipMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GossipMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void GossipMessage::ArenaDtor(void* object) {
  GossipMessage* _this = reinterpret_cast< GossipMessage* >(object);
  (void)_this;
}
void GossipMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GossipMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GossipMessage& GossipMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GossipMessage_nfiniity_5fcube_5fradio_2eproto.base);
  return *internal_default_instance();
}


void GossipMessage::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:GossipMessage)
  switch (kind_case()) {
    case kCbr: {
      if (GetArena() == nullptr) {
        delete kind_.cbr_;
      }
      break;
    }
    case kLinklayerRx: {
      if (GetArena() == nullptr) {
        delete kind_.linklayer_rx_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void GossipMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GossipMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GossipMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChannelBusyRatio cbr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cbr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LinkLayerReception linklayer_rx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linklayer_rx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GossipMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GossipMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (kind_case()) {
    case kCbr: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::cbr(this), target, stream);
      break;
    }
    case kLinklayerRx: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::linklayer_rx(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GossipMessage)
  return target;
}

size_t GossipMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GossipMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .ChannelBusyRatio cbr = 1;
    case kCbr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.cbr_);
      break;
    }
    // .LinkLayerReception linklayer_rx = 2;
    case kLinklayerRx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.linklayer_rx_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GossipMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GossipMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GossipMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GossipMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GossipMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GossipMessage)
    MergeFrom(*source);
  }
}

void GossipMessage::MergeFrom(const GossipMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GossipMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kCbr: {
      _internal_mutable_cbr()->::ChannelBusyRatio::MergeFrom(from._internal_cbr());
      break;
    }
    case kLinklayerRx: {
      _internal_mutable_linklayer_rx()->::LinkLayerReception::MergeFrom(from._internal_linklayer_rx());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void GossipMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GossipMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GossipMessage::CopyFrom(const GossipMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GossipMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GossipMessage::IsInitialized() const {
  switch (kind_case()) {
    case kCbr: {
      if (has_cbr()) {
        if (!this->cbr().IsInitialized()) return false;
      }
      break;
    }
    case kLinklayerRx: {
      if (has_linklayer_rx()) {
        if (!this->linklayer_rx().IsInitialized()) return false;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return true;
}

void GossipMessage::InternalSwap(GossipMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GossipMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CommandRequest* Arena::CreateMaybeMessage< ::CommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CommandResponse* Arena::CreateMaybeMessage< ::CommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CommandResponseData* Arena::CreateMaybeMessage< ::CommandResponseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommandResponseData >(arena);
}
template<> PROTOBUF_NOINLINE ::RadioConfiguration* Arena::CreateMaybeMessage< ::RadioConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RadioConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::LinkLayerTransmission* Arena::CreateMaybeMessage< ::LinkLayerTransmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LinkLayerTransmission >(arena);
}
template<> PROTOBUF_NOINLINE ::LinkLayerReception* Arena::CreateMaybeMessage< ::LinkLayerReception >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LinkLayerReception >(arena);
}
template<> PROTOBUF_NOINLINE ::ChannelBusyRatio* Arena::CreateMaybeMessage< ::ChannelBusyRatio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChannelBusyRatio >(arena);
}
template<> PROTOBUF_NOINLINE ::GossipMessage* Arena::CreateMaybeMessage< ::GossipMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GossipMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
